
f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a40  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  08000c04  08000c04  00001c04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000cd0  08000cd0  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000cd0  08000cd0  00001cd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000cd8  08000cd8  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08000cd8  08000cd8  00001cd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000ce0  08000ce0  00001ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000ce4  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000004  08000ce8  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08000ce8  000021b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001582  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004c5  00000000  00000000  000035b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000198  00000000  00000000  00003a80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000012a  00000000  00000000  00003c18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024c6  00000000  00000000  00003d42  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001b28  00000000  00000000  00006208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0000962b  00000000  00000000  00007d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001135b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000007b0  00000000  00000000  000113a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00011b50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000bec 	.word	0x08000bec

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000bec 	.word	0x08000bec

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <delay>:

#include<string.h>
#include "stm32f446xx.h"

void delay(void)
{
 8000214:	b480      	push	{r7}
 8000216:	b083      	sub	sp, #12
 8000218:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000 ; i ++);
 800021a:	2300      	movs	r3, #0
 800021c:	607b      	str	r3, [r7, #4]
 800021e:	e002      	b.n	8000226 <delay+0x12>
 8000220:	687b      	ldr	r3, [r7, #4]
 8000222:	3301      	adds	r3, #1
 8000224:	607b      	str	r3, [r7, #4]
 8000226:	687b      	ldr	r3, [r7, #4]
 8000228:	4a04      	ldr	r2, [pc, #16]	@ (800023c <delay+0x28>)
 800022a:	4293      	cmp	r3, r2
 800022c:	d9f8      	bls.n	8000220 <delay+0xc>
}
 800022e:	bf00      	nop
 8000230:	bf00      	nop
 8000232:	370c      	adds	r7, #12
 8000234:	46bd      	mov	sp, r7
 8000236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800023a:	4770      	bx	lr
 800023c:	0007a11f 	.word	0x0007a11f

08000240 <SPI2_GPIOInits>:
 *

 */

void SPI2_GPIOInits(void)
{
 8000240:	b580      	push	{r7, lr}
 8000242:	b084      	sub	sp, #16
 8000244:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 8000246:	4b11      	ldr	r3, [pc, #68]	@ (800028c <SPI2_GPIOInits+0x4c>)
 8000248:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 800024a:	2302      	movs	r3, #2
 800024c:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800024e:	2305      	movs	r3, #5
 8000250:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 8000252:	2300      	movs	r3, #0
 8000254:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000256:	2300      	movs	r3, #0
 8000258:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 800025a:	2302      	movs	r3, #2
 800025c:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800025e:	230d      	movs	r3, #13
 8000260:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000262:	1d3b      	adds	r3, r7, #4
 8000264:	4618      	mov	r0, r3
 8000266:	f000 f937 	bl	80004d8 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 800026a:	230f      	movs	r3, #15
 800026c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800026e:	1d3b      	adds	r3, r7, #4
 8000270:	4618      	mov	r0, r3
 8000272:	f000 f931 	bl	80004d8 <GPIO_Init>
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 8000276:	230c      	movs	r3, #12
 8000278:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800027a:	1d3b      	adds	r3, r7, #4
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f92b 	bl	80004d8 <GPIO_Init>


}
 8000282:	bf00      	nop
 8000284:	3710      	adds	r7, #16
 8000286:	46bd      	mov	sp, r7
 8000288:	bd80      	pop	{r7, pc}
 800028a:	bf00      	nop
 800028c:	40020400 	.word	0x40020400

08000290 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000290:	b580      	push	{r7, lr}
 8000292:	b088      	sub	sp, #32
 8000294:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000296:	4b0c      	ldr	r3, [pc, #48]	@ (80002c8 <SPI2_Inits+0x38>)
 8000298:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800029a:	2301      	movs	r3, #1
 800029c:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800029e:	2301      	movs	r3, #1
 80002a0:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV32;
 80002a2:	2304      	movs	r3, #4
 80002a4:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 80002a6:	2300      	movs	r3, #0
 80002a8:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80002aa:	2300      	movs	r3, #0
 80002ac:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80002ae:	2300      	movs	r3, #0
 80002b0:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 80002b2:	2300      	movs	r3, #0
 80002b4:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 80002b6:	463b      	mov	r3, r7
 80002b8:	4618      	mov	r0, r3
 80002ba:	f000 fb25 	bl	8000908 <SPI_Init>
}
 80002be:	bf00      	nop
 80002c0:	3720      	adds	r7, #32
 80002c2:	46bd      	mov	sp, r7
 80002c4:	bd80      	pop	{r7, pc}
 80002c6:	bf00      	nop
 80002c8:	40003800 	.word	0x40003800

080002cc <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 80002cc:	b580      	push	{r7, lr}
 80002ce:	b084      	sub	sp, #16
 80002d0:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 80002d2:	4b09      	ldr	r3, [pc, #36]	@ (80002f8 <GPIO_ButtonInit+0x2c>)
 80002d4:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 80002d6:	2300      	movs	r3, #0
 80002d8:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_IN;
 80002da:	2300      	movs	r3, #0
 80002dc:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80002de:	2302      	movs	r3, #2
 80002e0:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 80002e2:	2300      	movs	r3, #0
 80002e4:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 80002e6:	1d3b      	adds	r3, r7, #4
 80002e8:	4618      	mov	r0, r3
 80002ea:	f000 f8f5 	bl	80004d8 <GPIO_Init>

}
 80002ee:	bf00      	nop
 80002f0:	3710      	adds	r7, #16
 80002f2:	46bd      	mov	sp, r7
 80002f4:	bd80      	pop	{r7, pc}
 80002f6:	bf00      	nop
 80002f8:	40020000 	.word	0x40020000

080002fc <main>:


int main(void)
{
 80002fc:	b580      	push	{r7, lr}
 80002fe:	b0b4      	sub	sp, #208	@ 0xd0
 8000300:	af00      	add	r7, sp, #0
	char user_data[] = "An Arduino Uno board is best suited for beginners who have just started using microcontrollers, on the other hand, Arduino Mega board is for enthusiasts who require a lot of I/O pins for their projects";
 8000302:	4a21      	ldr	r2, [pc, #132]	@ (8000388 <main+0x8c>)
 8000304:	1d3b      	adds	r3, r7, #4
 8000306:	4611      	mov	r1, r2
 8000308:	22ca      	movs	r2, #202	@ 0xca
 800030a:	4618      	mov	r0, r3
 800030c:	f000 fbfc 	bl	8000b08 <memcpy>

	GPIO_ButtonInit();
 8000310:	f7ff ffdc 	bl	80002cc <GPIO_ButtonInit>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000314:	f7ff ff94 	bl	8000240 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000318:	f7ff ffba 	bl	8000290 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 800031c:	2101      	movs	r1, #1
 800031e:	481b      	ldr	r0, [pc, #108]	@ (800038c <main+0x90>)
 8000320:	f000 fbaf 	bl	8000a82 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000324:	bf00      	nop
 8000326:	2100      	movs	r1, #0
 8000328:	4819      	ldr	r0, [pc, #100]	@ (8000390 <main+0x94>)
 800032a:	f000 fa67 	bl	80007fc <GPIO_ReadFromInputPin>
 800032e:	4603      	mov	r3, r0
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f8      	beq.n	8000326 <main+0x2a>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000334:	f7ff ff6e 	bl	8000214 <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000338:	2101      	movs	r1, #1
 800033a:	4814      	ldr	r0, [pc, #80]	@ (800038c <main+0x90>)
 800033c:	f000 fb85 	bl	8000a4a <SPI_PeripheralControl>

		//first send length information
		uint8_t dataLen = strlen(user_data);
 8000340:	1d3b      	adds	r3, r7, #4
 8000342:	4618      	mov	r0, r3
 8000344:	f7ff ff5e 	bl	8000204 <strlen>
 8000348:	4603      	mov	r3, r0
 800034a:	b2db      	uxtb	r3, r3
 800034c:	70fb      	strb	r3, [r7, #3]
		SPI_SendData(SPI2,&dataLen,1);
 800034e:	1cfb      	adds	r3, r7, #3
 8000350:	2201      	movs	r2, #1
 8000352:	4619      	mov	r1, r3
 8000354:	480d      	ldr	r0, [pc, #52]	@ (800038c <main+0x90>)
 8000356:	f000 fb41 	bl	80009dc <SPI_SendData>

		//to send data
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	4618      	mov	r0, r3
 800035e:	f7ff ff51 	bl	8000204 <strlen>
 8000362:	4602      	mov	r2, r0
 8000364:	1d3b      	adds	r3, r7, #4
 8000366:	4619      	mov	r1, r3
 8000368:	4808      	ldr	r0, [pc, #32]	@ (800038c <main+0x90>)
 800036a:	f000 fb37 	bl	80009dc <SPI_SendData>

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 800036e:	bf00      	nop
 8000370:	2180      	movs	r1, #128	@ 0x80
 8000372:	4806      	ldr	r0, [pc, #24]	@ (800038c <main+0x90>)
 8000374:	f000 fb1e 	bl	80009b4 <SPI_GetFlagStatus>
 8000378:	4603      	mov	r3, r0
 800037a:	2b00      	cmp	r3, #0
 800037c:	d1f8      	bne.n	8000370 <main+0x74>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 800037e:	2100      	movs	r1, #0
 8000380:	4802      	ldr	r0, [pc, #8]	@ (800038c <main+0x90>)
 8000382:	f000 fb62 	bl	8000a4a <SPI_PeripheralControl>
	{
 8000386:	e7cd      	b.n	8000324 <main+0x28>
 8000388:	08000c04 	.word	0x08000c04
 800038c:	40003800 	.word	0x40003800
 8000390:	40020000 	.word	0x40020000

08000394 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000394:	480d      	ldr	r0, [pc, #52]	@ (80003cc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000396:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000398:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800039c:	480c      	ldr	r0, [pc, #48]	@ (80003d0 <LoopForever+0x6>)
  ldr r1, =_edata
 800039e:	490d      	ldr	r1, [pc, #52]	@ (80003d4 <LoopForever+0xa>)
  ldr r2, =_sidata
 80003a0:	4a0d      	ldr	r2, [pc, #52]	@ (80003d8 <LoopForever+0xe>)
  movs r3, #0
 80003a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80003a4:	e002      	b.n	80003ac <LoopCopyDataInit>

080003a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80003a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80003a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80003aa:	3304      	adds	r3, #4

080003ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80003ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80003ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80003b0:	d3f9      	bcc.n	80003a6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80003b2:	4a0a      	ldr	r2, [pc, #40]	@ (80003dc <LoopForever+0x12>)
  ldr r4, =_ebss
 80003b4:	4c0a      	ldr	r4, [pc, #40]	@ (80003e0 <LoopForever+0x16>)
  movs r3, #0
 80003b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80003b8:	e001      	b.n	80003be <LoopFillZerobss>

080003ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80003ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80003bc:	3204      	adds	r2, #4

080003be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80003be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80003c0:	d3fb      	bcc.n	80003ba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80003c2:	f000 fb7b 	bl	8000abc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80003c6:	f7ff ff99 	bl	80002fc <main>

080003ca <LoopForever>:

LoopForever:
  b LoopForever
 80003ca:	e7fe      	b.n	80003ca <LoopForever>
  ldr   r0, =_estack
 80003cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003d4:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 80003d8:	08000ce4 	.word	0x08000ce4
  ldr r2, =_sbss
 80003dc:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 80003e0:	200001b8 	.word	0x200001b8

080003e4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003e4:	e7fe      	b.n	80003e4 <ADC_IRQHandler>
	...

080003e8 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80003e8:	b480      	push	{r7}
 80003ea:	b083      	sub	sp, #12
 80003ec:	af00      	add	r7, sp, #0
 80003ee:	6078      	str	r0, [r7, #4]
 80003f0:	460b      	mov	r3, r1
 80003f2:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80003f4:	78fb      	ldrb	r3, [r7, #3]
 80003f6:	2b01      	cmp	r3, #1
 80003f8:	d156      	bne.n	80004a8 <GPIO_PeriClockControl+0xc0>
	{
		if(pGPIOx == GPIOA)
 80003fa:	687b      	ldr	r3, [r7, #4]
 80003fc:	4a2d      	ldr	r2, [pc, #180]	@ (80004b4 <GPIO_PeriClockControl+0xcc>)
 80003fe:	4293      	cmp	r3, r2
 8000400:	d106      	bne.n	8000410 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 8000402:	4b2d      	ldr	r3, [pc, #180]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 8000404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000406:	4a2c      	ldr	r2, [pc, #176]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 8000408:	f043 0301 	orr.w	r3, r3, #1
 800040c:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		//TODO
	}

}
 800040e:	e04b      	b.n	80004a8 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOB)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	4a2a      	ldr	r2, [pc, #168]	@ (80004bc <GPIO_PeriClockControl+0xd4>)
 8000414:	4293      	cmp	r3, r2
 8000416:	d106      	bne.n	8000426 <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000418:	4b27      	ldr	r3, [pc, #156]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 800041a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800041c:	4a26      	ldr	r2, [pc, #152]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 800041e:	f043 0302 	orr.w	r3, r3, #2
 8000422:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000424:	e040      	b.n	80004a8 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOC)
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	4a25      	ldr	r2, [pc, #148]	@ (80004c0 <GPIO_PeriClockControl+0xd8>)
 800042a:	4293      	cmp	r3, r2
 800042c:	d106      	bne.n	800043c <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 800042e:	4b22      	ldr	r3, [pc, #136]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 8000430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000432:	4a21      	ldr	r2, [pc, #132]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 8000434:	f043 0304 	orr.w	r3, r3, #4
 8000438:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800043a:	e035      	b.n	80004a8 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOD)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	4a21      	ldr	r2, [pc, #132]	@ (80004c4 <GPIO_PeriClockControl+0xdc>)
 8000440:	4293      	cmp	r3, r2
 8000442:	d106      	bne.n	8000452 <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 8000444:	4b1c      	ldr	r3, [pc, #112]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 8000446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000448:	4a1b      	ldr	r2, [pc, #108]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 800044a:	f043 0308 	orr.w	r3, r3, #8
 800044e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000450:	e02a      	b.n	80004a8 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOE)
 8000452:	687b      	ldr	r3, [r7, #4]
 8000454:	4a1c      	ldr	r2, [pc, #112]	@ (80004c8 <GPIO_PeriClockControl+0xe0>)
 8000456:	4293      	cmp	r3, r2
 8000458:	d106      	bne.n	8000468 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 800045a:	4b17      	ldr	r3, [pc, #92]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 800045c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800045e:	4a16      	ldr	r2, [pc, #88]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 8000460:	f043 0310 	orr.w	r3, r3, #16
 8000464:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000466:	e01f      	b.n	80004a8 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOF)
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	4a18      	ldr	r2, [pc, #96]	@ (80004cc <GPIO_PeriClockControl+0xe4>)
 800046c:	4293      	cmp	r3, r2
 800046e:	d106      	bne.n	800047e <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 8000470:	4b11      	ldr	r3, [pc, #68]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 8000472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000474:	4a10      	ldr	r2, [pc, #64]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 8000476:	f043 0320 	orr.w	r3, r3, #32
 800047a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800047c:	e014      	b.n	80004a8 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOG)
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	4a13      	ldr	r2, [pc, #76]	@ (80004d0 <GPIO_PeriClockControl+0xe8>)
 8000482:	4293      	cmp	r3, r2
 8000484:	d106      	bne.n	8000494 <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 8000486:	4b0c      	ldr	r3, [pc, #48]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 8000488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800048a:	4a0b      	ldr	r2, [pc, #44]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 800048c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000490:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000492:	e009      	b.n	80004a8 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOH)
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	4a0f      	ldr	r2, [pc, #60]	@ (80004d4 <GPIO_PeriClockControl+0xec>)
 8000498:	4293      	cmp	r3, r2
 800049a:	d105      	bne.n	80004a8 <GPIO_PeriClockControl+0xc0>
			GPIOH_PCLK_EN();
 800049c:	4b06      	ldr	r3, [pc, #24]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 800049e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80004a0:	4a05      	ldr	r2, [pc, #20]	@ (80004b8 <GPIO_PeriClockControl+0xd0>)
 80004a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80004a6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80004a8:	bf00      	nop
 80004aa:	370c      	adds	r7, #12
 80004ac:	46bd      	mov	sp, r7
 80004ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b2:	4770      	bx	lr
 80004b4:	40020000 	.word	0x40020000
 80004b8:	40023800 	.word	0x40023800
 80004bc:	40020400 	.word	0x40020400
 80004c0:	40020800 	.word	0x40020800
 80004c4:	40020c00 	.word	0x40020c00
 80004c8:	40021000 	.word	0x40021000
 80004cc:	40021400 	.word	0x40021400
 80004d0:	40021800 	.word	0x40021800
 80004d4:	40021c00 	.word	0x40021c00

080004d8 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80004d8:	b580      	push	{r7, lr}
 80004da:	b086      	sub	sp, #24
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 80004e0:	2300      	movs	r3, #0
 80004e2:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	2101      	movs	r1, #1
 80004ea:	4618      	mov	r0, r3
 80004ec:	f7ff ff7c 	bl	80003e8 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	795b      	ldrb	r3, [r3, #5]
 80004f4:	2b03      	cmp	r3, #3
 80004f6:	d820      	bhi.n	800053a <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	795b      	ldrb	r3, [r3, #5]
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	791b      	ldrb	r3, [r3, #4]
 8000502:	005b      	lsls	r3, r3, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 800050a:	687b      	ldr	r3, [r7, #4]
 800050c:	681b      	ldr	r3, [r3, #0]
 800050e:	681a      	ldr	r2, [r3, #0]
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	791b      	ldrb	r3, [r3, #4]
 8000514:	005b      	lsls	r3, r3, #1
 8000516:	2103      	movs	r1, #3
 8000518:	fa01 f303 	lsl.w	r3, r1, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	4619      	mov	r1, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	400a      	ands	r2, r1
 8000526:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	6819      	ldr	r1, [r3, #0]
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	697a      	ldr	r2, [r7, #20]
 8000534:	430a      	orrs	r2, r1
 8000536:	601a      	str	r2, [r3, #0]
 8000538:	e0c1      	b.n	80006be <GPIO_Init+0x1e6>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	795b      	ldrb	r3, [r3, #5]
 800053e:	2b04      	cmp	r3, #4
 8000540:	d117      	bne.n	8000572 <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000542:	4b47      	ldr	r3, [pc, #284]	@ (8000660 <GPIO_Init+0x188>)
 8000544:	68db      	ldr	r3, [r3, #12]
 8000546:	687a      	ldr	r2, [r7, #4]
 8000548:	7912      	ldrb	r2, [r2, #4]
 800054a:	4611      	mov	r1, r2
 800054c:	2201      	movs	r2, #1
 800054e:	408a      	lsls	r2, r1
 8000550:	4611      	mov	r1, r2
 8000552:	4a43      	ldr	r2, [pc, #268]	@ (8000660 <GPIO_Init+0x188>)
 8000554:	430b      	orrs	r3, r1
 8000556:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000558:	4b41      	ldr	r3, [pc, #260]	@ (8000660 <GPIO_Init+0x188>)
 800055a:	689b      	ldr	r3, [r3, #8]
 800055c:	687a      	ldr	r2, [r7, #4]
 800055e:	7912      	ldrb	r2, [r2, #4]
 8000560:	4611      	mov	r1, r2
 8000562:	2201      	movs	r2, #1
 8000564:	408a      	lsls	r2, r1
 8000566:	43d2      	mvns	r2, r2
 8000568:	4611      	mov	r1, r2
 800056a:	4a3d      	ldr	r2, [pc, #244]	@ (8000660 <GPIO_Init+0x188>)
 800056c:	400b      	ands	r3, r1
 800056e:	6093      	str	r3, [r2, #8]
 8000570:	e035      	b.n	80005de <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	795b      	ldrb	r3, [r3, #5]
 8000576:	2b05      	cmp	r3, #5
 8000578:	d117      	bne.n	80005aa <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800057a:	4b39      	ldr	r3, [pc, #228]	@ (8000660 <GPIO_Init+0x188>)
 800057c:	689b      	ldr	r3, [r3, #8]
 800057e:	687a      	ldr	r2, [r7, #4]
 8000580:	7912      	ldrb	r2, [r2, #4]
 8000582:	4611      	mov	r1, r2
 8000584:	2201      	movs	r2, #1
 8000586:	408a      	lsls	r2, r1
 8000588:	4611      	mov	r1, r2
 800058a:	4a35      	ldr	r2, [pc, #212]	@ (8000660 <GPIO_Init+0x188>)
 800058c:	430b      	orrs	r3, r1
 800058e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000590:	4b33      	ldr	r3, [pc, #204]	@ (8000660 <GPIO_Init+0x188>)
 8000592:	68db      	ldr	r3, [r3, #12]
 8000594:	687a      	ldr	r2, [r7, #4]
 8000596:	7912      	ldrb	r2, [r2, #4]
 8000598:	4611      	mov	r1, r2
 800059a:	2201      	movs	r2, #1
 800059c:	408a      	lsls	r2, r1
 800059e:	43d2      	mvns	r2, r2
 80005a0:	4611      	mov	r1, r2
 80005a2:	4a2f      	ldr	r2, [pc, #188]	@ (8000660 <GPIO_Init+0x188>)
 80005a4:	400b      	ands	r3, r1
 80005a6:	60d3      	str	r3, [r2, #12]
 80005a8:	e019      	b.n	80005de <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	795b      	ldrb	r3, [r3, #5]
 80005ae:	2b06      	cmp	r3, #6
 80005b0:	d115      	bne.n	80005de <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005b2:	4b2b      	ldr	r3, [pc, #172]	@ (8000660 <GPIO_Init+0x188>)
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	687a      	ldr	r2, [r7, #4]
 80005b8:	7912      	ldrb	r2, [r2, #4]
 80005ba:	4611      	mov	r1, r2
 80005bc:	2201      	movs	r2, #1
 80005be:	408a      	lsls	r2, r1
 80005c0:	4611      	mov	r1, r2
 80005c2:	4a27      	ldr	r2, [pc, #156]	@ (8000660 <GPIO_Init+0x188>)
 80005c4:	430b      	orrs	r3, r1
 80005c6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005c8:	4b25      	ldr	r3, [pc, #148]	@ (8000660 <GPIO_Init+0x188>)
 80005ca:	68db      	ldr	r3, [r3, #12]
 80005cc:	687a      	ldr	r2, [r7, #4]
 80005ce:	7912      	ldrb	r2, [r2, #4]
 80005d0:	4611      	mov	r1, r2
 80005d2:	2201      	movs	r2, #1
 80005d4:	408a      	lsls	r2, r1
 80005d6:	4611      	mov	r1, r2
 80005d8:	4a21      	ldr	r2, [pc, #132]	@ (8000660 <GPIO_Init+0x188>)
 80005da:	430b      	orrs	r3, r1
 80005dc:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	791b      	ldrb	r3, [r3, #4]
 80005e2:	089b      	lsrs	r3, r3, #2
 80005e4:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	791b      	ldrb	r3, [r3, #4]
 80005ea:	f003 0303 	and.w	r3, r3, #3
 80005ee:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a1b      	ldr	r2, [pc, #108]	@ (8000664 <GPIO_Init+0x18c>)
 80005f6:	4293      	cmp	r3, r2
 80005f8:	d044      	beq.n	8000684 <GPIO_Init+0x1ac>
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	681b      	ldr	r3, [r3, #0]
 80005fe:	4a1a      	ldr	r2, [pc, #104]	@ (8000668 <GPIO_Init+0x190>)
 8000600:	4293      	cmp	r3, r2
 8000602:	d02b      	beq.n	800065c <GPIO_Init+0x184>
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a18      	ldr	r2, [pc, #96]	@ (800066c <GPIO_Init+0x194>)
 800060a:	4293      	cmp	r3, r2
 800060c:	d024      	beq.n	8000658 <GPIO_Init+0x180>
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	681b      	ldr	r3, [r3, #0]
 8000612:	4a17      	ldr	r2, [pc, #92]	@ (8000670 <GPIO_Init+0x198>)
 8000614:	4293      	cmp	r3, r2
 8000616:	d01d      	beq.n	8000654 <GPIO_Init+0x17c>
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	4a15      	ldr	r2, [pc, #84]	@ (8000674 <GPIO_Init+0x19c>)
 800061e:	4293      	cmp	r3, r2
 8000620:	d016      	beq.n	8000650 <GPIO_Init+0x178>
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	681b      	ldr	r3, [r3, #0]
 8000626:	4a14      	ldr	r2, [pc, #80]	@ (8000678 <GPIO_Init+0x1a0>)
 8000628:	4293      	cmp	r3, r2
 800062a:	d00f      	beq.n	800064c <GPIO_Init+0x174>
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	4a12      	ldr	r2, [pc, #72]	@ (800067c <GPIO_Init+0x1a4>)
 8000632:	4293      	cmp	r3, r2
 8000634:	d008      	beq.n	8000648 <GPIO_Init+0x170>
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	4a11      	ldr	r2, [pc, #68]	@ (8000680 <GPIO_Init+0x1a8>)
 800063c:	4293      	cmp	r3, r2
 800063e:	d101      	bne.n	8000644 <GPIO_Init+0x16c>
 8000640:	2307      	movs	r3, #7
 8000642:	e020      	b.n	8000686 <GPIO_Init+0x1ae>
 8000644:	2300      	movs	r3, #0
 8000646:	e01e      	b.n	8000686 <GPIO_Init+0x1ae>
 8000648:	2306      	movs	r3, #6
 800064a:	e01c      	b.n	8000686 <GPIO_Init+0x1ae>
 800064c:	2305      	movs	r3, #5
 800064e:	e01a      	b.n	8000686 <GPIO_Init+0x1ae>
 8000650:	2304      	movs	r3, #4
 8000652:	e018      	b.n	8000686 <GPIO_Init+0x1ae>
 8000654:	2303      	movs	r3, #3
 8000656:	e016      	b.n	8000686 <GPIO_Init+0x1ae>
 8000658:	2302      	movs	r3, #2
 800065a:	e014      	b.n	8000686 <GPIO_Init+0x1ae>
 800065c:	2301      	movs	r3, #1
 800065e:	e012      	b.n	8000686 <GPIO_Init+0x1ae>
 8000660:	40013c00 	.word	0x40013c00
 8000664:	40020000 	.word	0x40020000
 8000668:	40020400 	.word	0x40020400
 800066c:	40020800 	.word	0x40020800
 8000670:	40020c00 	.word	0x40020c00
 8000674:	40021000 	.word	0x40021000
 8000678:	40021400 	.word	0x40021400
 800067c:	40021800 	.word	0x40021800
 8000680:	40021c00 	.word	0x40021c00
 8000684:	2300      	movs	r3, #0
 8000686:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 8000688:	4b59      	ldr	r3, [pc, #356]	@ (80007f0 <GPIO_Init+0x318>)
 800068a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800068c:	4a58      	ldr	r2, [pc, #352]	@ (80007f0 <GPIO_Init+0x318>)
 800068e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000692:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000694:	7c7a      	ldrb	r2, [r7, #17]
 8000696:	7cbb      	ldrb	r3, [r7, #18]
 8000698:	009b      	lsls	r3, r3, #2
 800069a:	fa02 f103 	lsl.w	r1, r2, r3
 800069e:	4a55      	ldr	r2, [pc, #340]	@ (80007f4 <GPIO_Init+0x31c>)
 80006a0:	7cfb      	ldrb	r3, [r7, #19]
 80006a2:	3302      	adds	r3, #2
 80006a4:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80006a8:	4b53      	ldr	r3, [pc, #332]	@ (80007f8 <GPIO_Init+0x320>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	7912      	ldrb	r2, [r2, #4]
 80006b0:	4611      	mov	r1, r2
 80006b2:	2201      	movs	r2, #1
 80006b4:	408a      	lsls	r2, r1
 80006b6:	4611      	mov	r1, r2
 80006b8:	4a4f      	ldr	r2, [pc, #316]	@ (80007f8 <GPIO_Init+0x320>)
 80006ba:	430b      	orrs	r3, r1
 80006bc:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006be:	687b      	ldr	r3, [r7, #4]
 80006c0:	799b      	ldrb	r3, [r3, #6]
 80006c2:	461a      	mov	r2, r3
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	791b      	ldrb	r3, [r3, #4]
 80006c8:	005b      	lsls	r3, r3, #1
 80006ca:	fa02 f303 	lsl.w	r3, r2, r3
 80006ce:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	689a      	ldr	r2, [r3, #8]
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	791b      	ldrb	r3, [r3, #4]
 80006da:	005b      	lsls	r3, r3, #1
 80006dc:	2103      	movs	r1, #3
 80006de:	fa01 f303 	lsl.w	r3, r1, r3
 80006e2:	43db      	mvns	r3, r3
 80006e4:	4619      	mov	r1, r3
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	400a      	ands	r2, r1
 80006ec:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	6899      	ldr	r1, [r3, #8]
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	697a      	ldr	r2, [r7, #20]
 80006fa:	430a      	orrs	r2, r1
 80006fc:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	79db      	ldrb	r3, [r3, #7]
 8000702:	461a      	mov	r2, r3
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	791b      	ldrb	r3, [r3, #4]
 8000708:	005b      	lsls	r3, r3, #1
 800070a:	fa02 f303 	lsl.w	r3, r2, r3
 800070e:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000710:	687b      	ldr	r3, [r7, #4]
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	68da      	ldr	r2, [r3, #12]
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	791b      	ldrb	r3, [r3, #4]
 800071a:	005b      	lsls	r3, r3, #1
 800071c:	2103      	movs	r1, #3
 800071e:	fa01 f303 	lsl.w	r3, r1, r3
 8000722:	43db      	mvns	r3, r3
 8000724:	4619      	mov	r1, r3
 8000726:	687b      	ldr	r3, [r7, #4]
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	400a      	ands	r2, r1
 800072c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800072e:	687b      	ldr	r3, [r7, #4]
 8000730:	681b      	ldr	r3, [r3, #0]
 8000732:	68d9      	ldr	r1, [r3, #12]
 8000734:	687b      	ldr	r3, [r7, #4]
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	697a      	ldr	r2, [r7, #20]
 800073a:	430a      	orrs	r2, r1
 800073c:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	7a1b      	ldrb	r3, [r3, #8]
 8000742:	461a      	mov	r2, r3
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	791b      	ldrb	r3, [r3, #4]
 8000748:	fa02 f303 	lsl.w	r3, r2, r3
 800074c:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	685a      	ldr	r2, [r3, #4]
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	791b      	ldrb	r3, [r3, #4]
 8000758:	4619      	mov	r1, r3
 800075a:	2301      	movs	r3, #1
 800075c:	408b      	lsls	r3, r1
 800075e:	43db      	mvns	r3, r3
 8000760:	4619      	mov	r1, r3
 8000762:	687b      	ldr	r3, [r7, #4]
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	400a      	ands	r2, r1
 8000768:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 800076a:	687b      	ldr	r3, [r7, #4]
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	6859      	ldr	r1, [r3, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	697a      	ldr	r2, [r7, #20]
 8000776:	430a      	orrs	r2, r1
 8000778:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	795b      	ldrb	r3, [r3, #5]
 800077e:	2b02      	cmp	r3, #2
 8000780:	d131      	bne.n	80007e6 <GPIO_Init+0x30e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 8000782:	687b      	ldr	r3, [r7, #4]
 8000784:	791b      	ldrb	r3, [r3, #4]
 8000786:	08db      	lsrs	r3, r3, #3
 8000788:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	791b      	ldrb	r3, [r3, #4]
 800078e:	f003 0307 	and.w	r3, r3, #7
 8000792:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	7c3a      	ldrb	r2, [r7, #16]
 800079a:	3208      	adds	r2, #8
 800079c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007a0:	7bfb      	ldrb	r3, [r7, #15]
 80007a2:	009b      	lsls	r3, r3, #2
 80007a4:	220f      	movs	r2, #15
 80007a6:	fa02 f303 	lsl.w	r3, r2, r3
 80007aa:	43db      	mvns	r3, r3
 80007ac:	4618      	mov	r0, r3
 80007ae:	687b      	ldr	r3, [r7, #4]
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	7c3a      	ldrb	r2, [r7, #16]
 80007b4:	4001      	ands	r1, r0
 80007b6:	3208      	adds	r2, #8
 80007b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	7c3a      	ldrb	r2, [r7, #16]
 80007c2:	3208      	adds	r2, #8
 80007c4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	7a5b      	ldrb	r3, [r3, #9]
 80007cc:	461a      	mov	r2, r3
 80007ce:	7bfb      	ldrb	r3, [r7, #15]
 80007d0:	009b      	lsls	r3, r3, #2
 80007d2:	fa02 f303 	lsl.w	r3, r2, r3
 80007d6:	4618      	mov	r0, r3
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	7c3a      	ldrb	r2, [r7, #16]
 80007de:	4301      	orrs	r1, r0
 80007e0:	3208      	adds	r2, #8
 80007e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 80007e6:	bf00      	nop
 80007e8:	3718      	adds	r7, #24
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40023800 	.word	0x40023800
 80007f4:	40013800 	.word	0x40013800
 80007f8:	40013c00 	.word	0x40013c00

080007fc <GPIO_ReadFromInputPin>:
 *
 * @Note              -

 */
uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 80007fc:	b480      	push	{r7}
 80007fe:	b085      	sub	sp, #20
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
 8000804:	460b      	mov	r3, r1
 8000806:	70fb      	strb	r3, [r7, #3]
   uint8_t value;

   value = (uint8_t )((pGPIOx->IDR  >> PinNumber) & 0x00000001 ) ;
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	691a      	ldr	r2, [r3, #16]
 800080c:	78fb      	ldrb	r3, [r7, #3]
 800080e:	fa22 f303 	lsr.w	r3, r2, r3
 8000812:	b2db      	uxtb	r3, r3
 8000814:	f003 0301 	and.w	r3, r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]

   return value;
 800081a:	7bfb      	ldrb	r3, [r7, #15]
}
 800081c:	4618      	mov	r0, r3
 800081e:	3714      	adds	r7, #20
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <SPI_PeriClockControl>:

/*********************************************************************
 * @fn      		  - SPI_PeriClockControl
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	460b      	mov	r3, r1
 8000832:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000834:	78fb      	ldrb	r3, [r7, #3]
 8000836:	2b01      	cmp	r3, #1
 8000838:	d12b      	bne.n	8000892 <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	4a2d      	ldr	r2, [pc, #180]	@ (80008f4 <SPI_PeriClockControl+0xcc>)
 800083e:	4293      	cmp	r3, r2
 8000840:	d106      	bne.n	8000850 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000842:	4b2d      	ldr	r3, [pc, #180]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 8000844:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000846:	4a2c      	ldr	r2, [pc, #176]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 8000848:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800084c:	6453      	str	r3, [r2, #68]	@ 0x44
		{
			SPI4_PCLK_DI();
		}
	}

}
 800084e:	e04b      	b.n	80008e8 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2)
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	4a2a      	ldr	r2, [pc, #168]	@ (80008fc <SPI_PeriClockControl+0xd4>)
 8000854:	4293      	cmp	r3, r2
 8000856:	d106      	bne.n	8000866 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000858:	4b27      	ldr	r3, [pc, #156]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800085c:	4a26      	ldr	r2, [pc, #152]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 800085e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000862:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8000864:	e040      	b.n	80008e8 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2)
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	4a24      	ldr	r2, [pc, #144]	@ (80008fc <SPI_PeriClockControl+0xd4>)
 800086a:	4293      	cmp	r3, r2
 800086c:	d106      	bne.n	800087c <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 800086e:	4b22      	ldr	r3, [pc, #136]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 8000870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000872:	4a21      	ldr	r2, [pc, #132]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 8000874:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000878:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800087a:	e035      	b.n	80008e8 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	4a20      	ldr	r2, [pc, #128]	@ (8000900 <SPI_PeriClockControl+0xd8>)
 8000880:	4293      	cmp	r3, r2
 8000882:	d131      	bne.n	80008e8 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 8000884:	4b1c      	ldr	r3, [pc, #112]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 8000886:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000888:	4a1b      	ldr	r2, [pc, #108]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 800088a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800088e:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000890:	e02a      	b.n	80008e8 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	4a17      	ldr	r2, [pc, #92]	@ (80008f4 <SPI_PeriClockControl+0xcc>)
 8000896:	4293      	cmp	r3, r2
 8000898:	d106      	bne.n	80008a8 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 800089a:	4b17      	ldr	r3, [pc, #92]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	4a16      	ldr	r2, [pc, #88]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 80008a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80008a4:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008a6:	e01f      	b.n	80008e8 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	4a14      	ldr	r2, [pc, #80]	@ (80008fc <SPI_PeriClockControl+0xd4>)
 80008ac:	4293      	cmp	r3, r2
 80008ae:	d106      	bne.n	80008be <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 80008b0:	4b11      	ldr	r3, [pc, #68]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 80008b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008b4:	4a10      	ldr	r2, [pc, #64]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 80008b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80008ba:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008bc:	e014      	b.n	80008e8 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3)
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	4a0f      	ldr	r2, [pc, #60]	@ (8000900 <SPI_PeriClockControl+0xd8>)
 80008c2:	4293      	cmp	r3, r2
 80008c4:	d106      	bne.n	80008d4 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 80008c6:	4b0c      	ldr	r3, [pc, #48]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 80008c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ca:	4a0b      	ldr	r2, [pc, #44]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 80008cc:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80008d0:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80008d2:	e009      	b.n	80008e8 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4)
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	4a0b      	ldr	r2, [pc, #44]	@ (8000904 <SPI_PeriClockControl+0xdc>)
 80008d8:	4293      	cmp	r3, r2
 80008da:	d105      	bne.n	80008e8 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 80008dc:	4b06      	ldr	r3, [pc, #24]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 80008de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008e0:	4a05      	ldr	r2, [pc, #20]	@ (80008f8 <SPI_PeriClockControl+0xd0>)
 80008e2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80008e6:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80008e8:	bf00      	nop
 80008ea:	370c      	adds	r7, #12
 80008ec:	46bd      	mov	sp, r7
 80008ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f2:	4770      	bx	lr
 80008f4:	40013000 	.word	0x40013000
 80008f8:	40023800 	.word	0x40023800
 80008fc:	40003800 	.word	0x40003800
 8000900:	40003c00 	.word	0x40003c00
 8000904:	40013400 	.word	0x40013400

08000908 <SPI_Init>:

/*********************************************************************
 * @fn      		  - SPI_Init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	2101      	movs	r1, #1
 8000916:	4618      	mov	r0, r3
 8000918:	f7ff ff86 	bl	8000828 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 800091c:	2300      	movs	r3, #0
 800091e:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	791b      	ldrb	r3, [r3, #4]
 8000924:	009b      	lsls	r3, r3, #2
 8000926:	68fa      	ldr	r2, [r7, #12]
 8000928:	4313      	orrs	r3, r2
 800092a:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	795b      	ldrb	r3, [r3, #5]
 8000930:	2b01      	cmp	r3, #1
 8000932:	d104      	bne.n	800093e <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000934:	68fb      	ldr	r3, [r7, #12]
 8000936:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800093a:	60fb      	str	r3, [r7, #12]
 800093c:	e014      	b.n	8000968 <SPI_Init+0x60>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	795b      	ldrb	r3, [r3, #5]
 8000942:	2b02      	cmp	r3, #2
 8000944:	d104      	bne.n	8000950 <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	e00b      	b.n	8000968 <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	795b      	ldrb	r3, [r3, #5]
 8000954:	2b03      	cmp	r3, #3
 8000956:	d107      	bne.n	8000968 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000958:	68fb      	ldr	r3, [r7, #12]
 800095a:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800095e:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000966:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 8000968:	687b      	ldr	r3, [r7, #4]
 800096a:	799b      	ldrb	r3, [r3, #6]
 800096c:	00db      	lsls	r3, r3, #3
 800096e:	68fa      	ldr	r2, [r7, #12]
 8000970:	4313      	orrs	r3, r2
 8000972:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	79db      	ldrb	r3, [r3, #7]
 8000978:	02db      	lsls	r3, r3, #11
 800097a:	68fa      	ldr	r2, [r7, #12]
 800097c:	4313      	orrs	r3, r2
 800097e:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	7a1b      	ldrb	r3, [r3, #8]
 8000984:	005b      	lsls	r3, r3, #1
 8000986:	68fa      	ldr	r2, [r7, #12]
 8000988:	4313      	orrs	r3, r2
 800098a:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	7a5b      	ldrb	r3, [r3, #9]
 8000990:	461a      	mov	r2, r3
 8000992:	68fb      	ldr	r3, [r7, #12]
 8000994:	4313      	orrs	r3, r2
 8000996:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	7a9b      	ldrb	r3, [r3, #10]
 800099c:	025b      	lsls	r3, r3, #9
 800099e:	68fa      	ldr	r2, [r7, #12]
 80009a0:	4313      	orrs	r3, r2
 80009a2:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	68fa      	ldr	r2, [r7, #12]
 80009aa:	601a      	str	r2, [r3, #0]

}
 80009ac:	bf00      	nop
 80009ae:	3710      	adds	r7, #16
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bd80      	pop	{r7, pc}

080009b4 <SPI_GetFlagStatus>:
		SPI4_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	689a      	ldr	r2, [r3, #8]
 80009c2:	683b      	ldr	r3, [r7, #0]
 80009c4:	4013      	ands	r3, r2
 80009c6:	2b00      	cmp	r3, #0
 80009c8:	d001      	beq.n	80009ce <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 80009ca:	2301      	movs	r3, #1
 80009cc:	e000      	b.n	80009d0 <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 80009ce:	2300      	movs	r3, #0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	370c      	adds	r7, #12
 80009d4:	46bd      	mov	sp, r7
 80009d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009da:	4770      	bx	lr

080009dc <SPI_SendData>:

/*********************************************************************
 * @fn      		  - SPI_SendData
 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	60f8      	str	r0, [r7, #12]
 80009e4:	60b9      	str	r1, [r7, #8]
 80009e6:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80009e8:	e027      	b.n	8000a3a <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 80009ea:	bf00      	nop
 80009ec:	2102      	movs	r1, #2
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f7ff ffe0 	bl	80009b4 <SPI_GetFlagStatus>
 80009f4:	4603      	mov	r3, r0
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d0f8      	beq.n	80009ec <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d00e      	beq.n	8000a24 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 8000a06:	68bb      	ldr	r3, [r7, #8]
 8000a08:	881b      	ldrh	r3, [r3, #0]
 8000a0a:	461a      	mov	r2, r3
 8000a0c:	68fb      	ldr	r3, [r7, #12]
 8000a0e:	60da      	str	r2, [r3, #12]
			Len--;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	3b01      	subs	r3, #1
 8000a14:	607b      	str	r3, [r7, #4]
			Len--;
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000a1c:	68bb      	ldr	r3, [r7, #8]
 8000a1e:	3301      	adds	r3, #1
 8000a20:	60bb      	str	r3, [r7, #8]
 8000a22:	e00a      	b.n	8000a3a <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR =   *pTxBuffer;
 8000a24:	68bb      	ldr	r3, [r7, #8]
 8000a26:	781b      	ldrb	r3, [r3, #0]
 8000a28:	461a      	mov	r2, r3
 8000a2a:	68fb      	ldr	r3, [r7, #12]
 8000a2c:	60da      	str	r2, [r3, #12]
			Len--;
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	3b01      	subs	r3, #1
 8000a32:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	3301      	adds	r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	2b00      	cmp	r3, #0
 8000a3e:	d1d4      	bne.n	80009ea <SPI_SendData+0xe>
		}
	}

}
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	3710      	adds	r7, #16
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <SPI_PeripheralControl>:

/*********************************************************************
 * @fn      		  - SPI_PeripheralControl
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a4a:	b480      	push	{r7}
 8000a4c:	b083      	sub	sp, #12
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a56:	78fb      	ldrb	r3, [r7, #3]
 8000a58:	2b01      	cmp	r3, #1
 8000a5a:	d106      	bne.n	8000a6a <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 8000a68:	e005      	b.n	8000a76 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	601a      	str	r2, [r3, #0]
}
 8000a76:	bf00      	nop
 8000a78:	370c      	adds	r7, #12
 8000a7a:	46bd      	mov	sp, r7
 8000a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a80:	4770      	bx	lr

08000a82 <SPI_SSOEConfig>:

/*********************************************************************
 * @fn      		  - SPI_SSOEConfig
 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000a82:	b480      	push	{r7}
 8000a84:	b083      	sub	sp, #12
 8000a86:	af00      	add	r7, sp, #0
 8000a88:	6078      	str	r0, [r7, #4]
 8000a8a:	460b      	mov	r3, r1
 8000a8c:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000a8e:	78fb      	ldrb	r3, [r7, #3]
 8000a90:	2b01      	cmp	r3, #1
 8000a92:	d106      	bne.n	8000aa2 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	f043 0204 	orr.w	r2, r3, #4
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000aa0:	e005      	b.n	8000aae <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f023 0204 	bic.w	r2, r3, #4
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	605a      	str	r2, [r3, #4]
}
 8000aae:	bf00      	nop
 8000ab0:	370c      	adds	r7, #12
 8000ab2:	46bd      	mov	sp, r7
 8000ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab8:	4770      	bx	lr
	...

08000abc <__libc_init_array>:
 8000abc:	b570      	push	{r4, r5, r6, lr}
 8000abe:	4d0d      	ldr	r5, [pc, #52]	@ (8000af4 <__libc_init_array+0x38>)
 8000ac0:	4c0d      	ldr	r4, [pc, #52]	@ (8000af8 <__libc_init_array+0x3c>)
 8000ac2:	1b64      	subs	r4, r4, r5
 8000ac4:	10a4      	asrs	r4, r4, #2
 8000ac6:	2600      	movs	r6, #0
 8000ac8:	42a6      	cmp	r6, r4
 8000aca:	d109      	bne.n	8000ae0 <__libc_init_array+0x24>
 8000acc:	4d0b      	ldr	r5, [pc, #44]	@ (8000afc <__libc_init_array+0x40>)
 8000ace:	4c0c      	ldr	r4, [pc, #48]	@ (8000b00 <__libc_init_array+0x44>)
 8000ad0:	f000 f88c 	bl	8000bec <_init>
 8000ad4:	1b64      	subs	r4, r4, r5
 8000ad6:	10a4      	asrs	r4, r4, #2
 8000ad8:	2600      	movs	r6, #0
 8000ada:	42a6      	cmp	r6, r4
 8000adc:	d105      	bne.n	8000aea <__libc_init_array+0x2e>
 8000ade:	bd70      	pop	{r4, r5, r6, pc}
 8000ae0:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ae4:	4798      	blx	r3
 8000ae6:	3601      	adds	r6, #1
 8000ae8:	e7ee      	b.n	8000ac8 <__libc_init_array+0xc>
 8000aea:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aee:	4798      	blx	r3
 8000af0:	3601      	adds	r6, #1
 8000af2:	e7f2      	b.n	8000ada <__libc_init_array+0x1e>
 8000af4:	08000cd8 	.word	0x08000cd8
 8000af8:	08000cd8 	.word	0x08000cd8
 8000afc:	08000cd8 	.word	0x08000cd8
 8000b00:	08000ce0 	.word	0x08000ce0

08000b04 <__retarget_lock_acquire_recursive>:
 8000b04:	4770      	bx	lr

08000b06 <__retarget_lock_release_recursive>:
 8000b06:	4770      	bx	lr

08000b08 <memcpy>:
 8000b08:	440a      	add	r2, r1
 8000b0a:	4291      	cmp	r1, r2
 8000b0c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b10:	d100      	bne.n	8000b14 <memcpy+0xc>
 8000b12:	4770      	bx	lr
 8000b14:	b510      	push	{r4, lr}
 8000b16:	f811 4b01 	ldrb.w	r4, [r1], #1
 8000b1a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8000b1e:	4291      	cmp	r1, r2
 8000b20:	d1f9      	bne.n	8000b16 <memcpy+0xe>
 8000b22:	bd10      	pop	{r4, pc}

08000b24 <register_fini>:
 8000b24:	4b02      	ldr	r3, [pc, #8]	@ (8000b30 <register_fini+0xc>)
 8000b26:	b113      	cbz	r3, 8000b2e <register_fini+0xa>
 8000b28:	4802      	ldr	r0, [pc, #8]	@ (8000b34 <register_fini+0x10>)
 8000b2a:	f000 b805 	b.w	8000b38 <atexit>
 8000b2e:	4770      	bx	lr
 8000b30:	00000000 	.word	0x00000000
 8000b34:	08000b45 	.word	0x08000b45

08000b38 <atexit>:
 8000b38:	2300      	movs	r3, #0
 8000b3a:	4601      	mov	r1, r0
 8000b3c:	461a      	mov	r2, r3
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f000 b814 	b.w	8000b6c <__register_exitproc>

08000b44 <__libc_fini_array>:
 8000b44:	b538      	push	{r3, r4, r5, lr}
 8000b46:	4d07      	ldr	r5, [pc, #28]	@ (8000b64 <__libc_fini_array+0x20>)
 8000b48:	4c07      	ldr	r4, [pc, #28]	@ (8000b68 <__libc_fini_array+0x24>)
 8000b4a:	1b64      	subs	r4, r4, r5
 8000b4c:	10a4      	asrs	r4, r4, #2
 8000b4e:	b91c      	cbnz	r4, 8000b58 <__libc_fini_array+0x14>
 8000b50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000b54:	f000 b850 	b.w	8000bf8 <_fini>
 8000b58:	3c01      	subs	r4, #1
 8000b5a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8000b5e:	4798      	blx	r3
 8000b60:	e7f5      	b.n	8000b4e <__libc_fini_array+0xa>
 8000b62:	bf00      	nop
 8000b64:	08000ce0 	.word	0x08000ce0
 8000b68:	08000ce4 	.word	0x08000ce4

08000b6c <__register_exitproc>:
 8000b6c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b70:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8000be8 <__register_exitproc+0x7c>
 8000b74:	4606      	mov	r6, r0
 8000b76:	f8da 0000 	ldr.w	r0, [sl]
 8000b7a:	4698      	mov	r8, r3
 8000b7c:	460f      	mov	r7, r1
 8000b7e:	4691      	mov	r9, r2
 8000b80:	f7ff ffc0 	bl	8000b04 <__retarget_lock_acquire_recursive>
 8000b84:	4b16      	ldr	r3, [pc, #88]	@ (8000be0 <__register_exitproc+0x74>)
 8000b86:	681c      	ldr	r4, [r3, #0]
 8000b88:	b90c      	cbnz	r4, 8000b8e <__register_exitproc+0x22>
 8000b8a:	4c16      	ldr	r4, [pc, #88]	@ (8000be4 <__register_exitproc+0x78>)
 8000b8c:	601c      	str	r4, [r3, #0]
 8000b8e:	6865      	ldr	r5, [r4, #4]
 8000b90:	f8da 0000 	ldr.w	r0, [sl]
 8000b94:	2d1f      	cmp	r5, #31
 8000b96:	dd05      	ble.n	8000ba4 <__register_exitproc+0x38>
 8000b98:	f7ff ffb5 	bl	8000b06 <__retarget_lock_release_recursive>
 8000b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba4:	b19e      	cbz	r6, 8000bce <__register_exitproc+0x62>
 8000ba6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8000baa:	2201      	movs	r2, #1
 8000bac:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8000bb0:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8000bb4:	40aa      	lsls	r2, r5
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8000bbc:	2e02      	cmp	r6, #2
 8000bbe:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8000bc2:	bf02      	ittt	eq
 8000bc4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8000bc8:	4313      	orreq	r3, r2
 8000bca:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8000bce:	1c6b      	adds	r3, r5, #1
 8000bd0:	3502      	adds	r5, #2
 8000bd2:	6063      	str	r3, [r4, #4]
 8000bd4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8000bd8:	f7ff ff95 	bl	8000b06 <__retarget_lock_release_recursive>
 8000bdc:	2000      	movs	r0, #0
 8000bde:	e7df      	b.n	8000ba0 <__register_exitproc+0x34>
 8000be0:	20000024 	.word	0x20000024
 8000be4:	20000028 	.word	0x20000028
 8000be8:	20000000 	.word	0x20000000

08000bec <_init>:
 8000bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bee:	bf00      	nop
 8000bf0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bf2:	bc08      	pop	{r3}
 8000bf4:	469e      	mov	lr, r3
 8000bf6:	4770      	bx	lr

08000bf8 <_fini>:
 8000bf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bfa:	bf00      	nop
 8000bfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfe:	bc08      	pop	{r3}
 8000c00:	469e      	mov	lr, r3
 8000c02:	4770      	bx	lr
