
f446re_drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000960  080001c4  080001c4  000011c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000000c  08000b24  08000b24  00001b24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000b30  08000b30  00002004  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08000b30  08000b30  00001b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08000b38  08000b38  00002004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08000b38  08000b38  00001b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000b40  08000b40  00001b40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000004  20000000  08000b44  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b4  20000004  08000b48  00002004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  08000b48  000021b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001517  00000000  00000000  00002034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000004a9  00000000  00000000  0000354b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000188  00000000  00000000  000039f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000011d  00000000  00000000  00003b80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000024c6  00000000  00000000  00003c9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001aaf  00000000  00000000  00006163  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009601  00000000  00000000  00007c12  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00011213  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000073c  00000000  00000000  00011258  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000052  00000000  00000000  00011994  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c4 <__do_global_dtors_aux>:
 80001c4:	b510      	push	{r4, lr}
 80001c6:	4c05      	ldr	r4, [pc, #20]	@ (80001dc <__do_global_dtors_aux+0x18>)
 80001c8:	7823      	ldrb	r3, [r4, #0]
 80001ca:	b933      	cbnz	r3, 80001da <__do_global_dtors_aux+0x16>
 80001cc:	4b04      	ldr	r3, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x1c>)
 80001ce:	b113      	cbz	r3, 80001d6 <__do_global_dtors_aux+0x12>
 80001d0:	4804      	ldr	r0, [pc, #16]	@ (80001e4 <__do_global_dtors_aux+0x20>)
 80001d2:	f3af 8000 	nop.w
 80001d6:	2301      	movs	r3, #1
 80001d8:	7023      	strb	r3, [r4, #0]
 80001da:	bd10      	pop	{r4, pc}
 80001dc:	20000004 	.word	0x20000004
 80001e0:	00000000 	.word	0x00000000
 80001e4:	08000b0c 	.word	0x08000b0c

080001e8 <frame_dummy>:
 80001e8:	b508      	push	{r3, lr}
 80001ea:	4b03      	ldr	r3, [pc, #12]	@ (80001f8 <frame_dummy+0x10>)
 80001ec:	b11b      	cbz	r3, 80001f6 <frame_dummy+0xe>
 80001ee:	4903      	ldr	r1, [pc, #12]	@ (80001fc <frame_dummy+0x14>)
 80001f0:	4803      	ldr	r0, [pc, #12]	@ (8000200 <frame_dummy+0x18>)
 80001f2:	f3af 8000 	nop.w
 80001f6:	bd08      	pop	{r3, pc}
 80001f8:	00000000 	.word	0x00000000
 80001fc:	20000008 	.word	0x20000008
 8000200:	08000b0c 	.word	0x08000b0c

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr

08000214 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 8000214:	b580      	push	{r7, lr}
 8000216:	b084      	sub	sp, #16
 8000218:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	GPIO_PeriClockControl(GPIOB, ENABLE);
 800021a:	2101      	movs	r1, #1
 800021c:	480f      	ldr	r0, [pc, #60]	@ (800025c <SPI2_GPIOInits+0x48>)
 800021e:	f000 f897 	bl	8000350 <GPIO_PeriClockControl>
	SPIPins.pGPIOx = GPIOB;
 8000222:	4b0e      	ldr	r3, [pc, #56]	@ (800025c <SPI2_GPIOInits+0x48>)
 8000224:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000226:	2302      	movs	r3, #2
 8000228:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800022a:	2305      	movs	r3, #5
 800022c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OP_TYPE_PP;
 800022e:	2300      	movs	r3, #0
 8000230:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000232:	2300      	movs	r3, #0
 8000234:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000236:	2302      	movs	r3, #2
 8000238:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800023a:	230d      	movs	r3, #13
 800023c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800023e:	1d3b      	adds	r3, r7, #4
 8000240:	4618      	mov	r0, r3
 8000242:	f000 f8fd 	bl	8000440 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000246:	230f      	movs	r3, #15
 8000248:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800024a:	1d3b      	adds	r3, r7, #4
 800024c:	4618      	mov	r0, r3
 800024e:	f000 f8f7 	bl	8000440 <GPIO_Init>
	//NSS
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
	//GPIO_Init(&SPIPins);


}
 8000252:	bf00      	nop
 8000254:	3710      	adds	r7, #16
 8000256:	46bd      	mov	sp, r7
 8000258:	bd80      	pop	{r7, pc}
 800025a:	bf00      	nop
 800025c:	40020400 	.word	0x40020400

08000260 <SPI2_Inits>:

void SPI2_Inits(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b088      	sub	sp, #32
 8000264:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 8000266:	4b0c      	ldr	r3, [pc, #48]	@ (8000298 <SPI2_Inits+0x38>)
 8000268:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 800026a:	2301      	movs	r3, #1
 800026c:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 800026e:	2301      	movs	r3, #1
 8000270:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV2;//generates sclk of 8MHz
 8000272:	2300      	movs	r3, #0
 8000274:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000276:	2300      	movs	r3, #0
 8000278:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_HIGH;
 800027a:	2301      	movs	r3, #1
 800027c:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 800027e:	2300      	movs	r3, #0
 8000280:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_EN; //software slave management enabled for NSS pin
 8000282:	2301      	movs	r3, #1
 8000284:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000286:	463b      	mov	r3, r7
 8000288:	4618      	mov	r0, r3
 800028a:	f000 fadb 	bl	8000844 <SPI_Init>
}
 800028e:	bf00      	nop
 8000290:	3720      	adds	r7, #32
 8000292:	46bd      	mov	sp, r7
 8000294:	bd80      	pop	{r7, pc}
 8000296:	bf00      	nop
 8000298:	40003800 	.word	0x40003800

0800029c <main>:

int main(void)
{
 800029c:	b580      	push	{r7, lr}
 800029e:	b084      	sub	sp, #16
 80002a0:	af00      	add	r7, sp, #0
	char user_data[] = "Hello world";
 80002a2:	4a14      	ldr	r2, [pc, #80]	@ (80002f4 <main+0x58>)
 80002a4:	1d3b      	adds	r3, r7, #4
 80002a6:	ca07      	ldmia	r2, {r0, r1, r2}
 80002a8:	e883 0007 	stmia.w	r3, {r0, r1, r2}

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 80002ac:	f7ff ffb2 	bl	8000214 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 80002b0:	f7ff ffd6 	bl	8000260 <SPI2_Inits>

	//this makes NSS signal internally high and avoids MODF error
	SPI_SSIConfig(SPI2,ENABLE);
 80002b4:	2101      	movs	r1, #1
 80002b6:	4810      	ldr	r0, [pc, #64]	@ (80002f8 <main+0x5c>)
 80002b8:	f000 fb81 	bl	80009be <SPI_SSIConfig>

	//enable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,ENABLE);
 80002bc:	2101      	movs	r1, #1
 80002be:	480e      	ldr	r0, [pc, #56]	@ (80002f8 <main+0x5c>)
 80002c0:	f000 fb61 	bl	8000986 <SPI_PeripheralControl>

	//to send data
	SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 80002c4:	1d3b      	adds	r3, r7, #4
 80002c6:	4618      	mov	r0, r3
 80002c8:	f7ff ff9c 	bl	8000204 <strlen>
 80002cc:	4602      	mov	r2, r0
 80002ce:	1d3b      	adds	r3, r7, #4
 80002d0:	4619      	mov	r1, r3
 80002d2:	4809      	ldr	r0, [pc, #36]	@ (80002f8 <main+0x5c>)
 80002d4:	f000 fb20 	bl	8000918 <SPI_SendData>

	//lets confirm SPI is not busy
	while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 80002d8:	bf00      	nop
 80002da:	2180      	movs	r1, #128	@ 0x80
 80002dc:	4806      	ldr	r0, [pc, #24]	@ (80002f8 <main+0x5c>)
 80002de:	f000 fb07 	bl	80008f0 <SPI_GetFlagStatus>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d1f8      	bne.n	80002da <main+0x3e>

	//Disable the SPI2 peripheral
	SPI_PeripheralControl(SPI2,DISABLE);
 80002e8:	2100      	movs	r1, #0
 80002ea:	4803      	ldr	r0, [pc, #12]	@ (80002f8 <main+0x5c>)
 80002ec:	f000 fb4b 	bl	8000986 <SPI_PeripheralControl>

	while(1);
 80002f0:	bf00      	nop
 80002f2:	e7fd      	b.n	80002f0 <main+0x54>
 80002f4:	08000b24 	.word	0x08000b24
 80002f8:	40003800 	.word	0x40003800

080002fc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002fc:	480d      	ldr	r0, [pc, #52]	@ (8000334 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002fe:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000300:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000304:	480c      	ldr	r0, [pc, #48]	@ (8000338 <LoopForever+0x6>)
  ldr r1, =_edata
 8000306:	490d      	ldr	r1, [pc, #52]	@ (800033c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000308:	4a0d      	ldr	r2, [pc, #52]	@ (8000340 <LoopForever+0xe>)
  movs r3, #0
 800030a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800030c:	e002      	b.n	8000314 <LoopCopyDataInit>

0800030e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800030e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000310:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000312:	3304      	adds	r3, #4

08000314 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000314:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000316:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000318:	d3f9      	bcc.n	800030e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800031a:	4a0a      	ldr	r2, [pc, #40]	@ (8000344 <LoopForever+0x12>)
  ldr r4, =_ebss
 800031c:	4c0a      	ldr	r4, [pc, #40]	@ (8000348 <LoopForever+0x16>)
  movs r3, #0
 800031e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000320:	e001      	b.n	8000326 <LoopFillZerobss>

08000322 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000322:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000324:	3204      	adds	r2, #4

08000326 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000326:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000328:	d3fb      	bcc.n	8000322 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800032a:	f000 fb65 	bl	80009f8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800032e:	f7ff ffb5 	bl	800029c <main>

08000332 <LoopForever>:

LoopForever:
  b LoopForever
 8000332:	e7fe      	b.n	8000332 <LoopForever>
  ldr   r0, =_estack
 8000334:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000338:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800033c:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 8000340:	08000b44 	.word	0x08000b44
  ldr r2, =_sbss
 8000344:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8000348:	200001b8 	.word	0x200001b8

0800034c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800034c:	e7fe      	b.n	800034c <ADC_IRQHandler>
	...

08000350 <GPIO_PeriClockControl>:
 *
 * @Note              -  none

 */
void GPIO_PeriClockControl(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 8000350:	b480      	push	{r7}
 8000352:	b083      	sub	sp, #12
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 800035c:	78fb      	ldrb	r3, [r7, #3]
 800035e:	2b01      	cmp	r3, #1
 8000360:	d156      	bne.n	8000410 <GPIO_PeriClockControl+0xc0>
	{
		if(pGPIOx == GPIOA)
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	4a2d      	ldr	r2, [pc, #180]	@ (800041c <GPIO_PeriClockControl+0xcc>)
 8000366:	4293      	cmp	r3, r2
 8000368:	d106      	bne.n	8000378 <GPIO_PeriClockControl+0x28>
		{
			GPIOA_PCLK_EN();
 800036a:	4b2d      	ldr	r3, [pc, #180]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 800036c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800036e:	4a2c      	ldr	r2, [pc, #176]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 8000370:	f043 0301 	orr.w	r3, r3, #1
 8000374:	6313      	str	r3, [r2, #48]	@ 0x30
	else
	{
		//TODO
	}

}
 8000376:	e04b      	b.n	8000410 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOB)
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	4a2a      	ldr	r2, [pc, #168]	@ (8000424 <GPIO_PeriClockControl+0xd4>)
 800037c:	4293      	cmp	r3, r2
 800037e:	d106      	bne.n	800038e <GPIO_PeriClockControl+0x3e>
			GPIOB_PCLK_EN();
 8000380:	4b27      	ldr	r3, [pc, #156]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 8000382:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000384:	4a26      	ldr	r2, [pc, #152]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 8000386:	f043 0302 	orr.w	r3, r3, #2
 800038a:	6313      	str	r3, [r2, #48]	@ 0x30
}
 800038c:	e040      	b.n	8000410 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOC)
 800038e:	687b      	ldr	r3, [r7, #4]
 8000390:	4a25      	ldr	r2, [pc, #148]	@ (8000428 <GPIO_PeriClockControl+0xd8>)
 8000392:	4293      	cmp	r3, r2
 8000394:	d106      	bne.n	80003a4 <GPIO_PeriClockControl+0x54>
			GPIOC_PCLK_EN();
 8000396:	4b22      	ldr	r3, [pc, #136]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 8000398:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800039a:	4a21      	ldr	r2, [pc, #132]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 800039c:	f043 0304 	orr.w	r3, r3, #4
 80003a0:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003a2:	e035      	b.n	8000410 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOD)
 80003a4:	687b      	ldr	r3, [r7, #4]
 80003a6:	4a21      	ldr	r2, [pc, #132]	@ (800042c <GPIO_PeriClockControl+0xdc>)
 80003a8:	4293      	cmp	r3, r2
 80003aa:	d106      	bne.n	80003ba <GPIO_PeriClockControl+0x6a>
			GPIOD_PCLK_EN();
 80003ac:	4b1c      	ldr	r3, [pc, #112]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 80003ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003b0:	4a1b      	ldr	r2, [pc, #108]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 80003b2:	f043 0308 	orr.w	r3, r3, #8
 80003b6:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003b8:	e02a      	b.n	8000410 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOE)
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	4a1c      	ldr	r2, [pc, #112]	@ (8000430 <GPIO_PeriClockControl+0xe0>)
 80003be:	4293      	cmp	r3, r2
 80003c0:	d106      	bne.n	80003d0 <GPIO_PeriClockControl+0x80>
			GPIOE_PCLK_EN();
 80003c2:	4b17      	ldr	r3, [pc, #92]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 80003c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003c6:	4a16      	ldr	r2, [pc, #88]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 80003c8:	f043 0310 	orr.w	r3, r3, #16
 80003cc:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003ce:	e01f      	b.n	8000410 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOF)
 80003d0:	687b      	ldr	r3, [r7, #4]
 80003d2:	4a18      	ldr	r2, [pc, #96]	@ (8000434 <GPIO_PeriClockControl+0xe4>)
 80003d4:	4293      	cmp	r3, r2
 80003d6:	d106      	bne.n	80003e6 <GPIO_PeriClockControl+0x96>
			GPIOF_PCLK_EN();
 80003d8:	4b11      	ldr	r3, [pc, #68]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 80003da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003dc:	4a10      	ldr	r2, [pc, #64]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 80003de:	f043 0320 	orr.w	r3, r3, #32
 80003e2:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003e4:	e014      	b.n	8000410 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOG)
 80003e6:	687b      	ldr	r3, [r7, #4]
 80003e8:	4a13      	ldr	r2, [pc, #76]	@ (8000438 <GPIO_PeriClockControl+0xe8>)
 80003ea:	4293      	cmp	r3, r2
 80003ec:	d106      	bne.n	80003fc <GPIO_PeriClockControl+0xac>
			GPIOG_PCLK_EN();
 80003ee:	4b0c      	ldr	r3, [pc, #48]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 80003f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80003f2:	4a0b      	ldr	r2, [pc, #44]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 80003f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80003f8:	6313      	str	r3, [r2, #48]	@ 0x30
}
 80003fa:	e009      	b.n	8000410 <GPIO_PeriClockControl+0xc0>
		}else if (pGPIOx == GPIOH)
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	4a0f      	ldr	r2, [pc, #60]	@ (800043c <GPIO_PeriClockControl+0xec>)
 8000400:	4293      	cmp	r3, r2
 8000402:	d105      	bne.n	8000410 <GPIO_PeriClockControl+0xc0>
			GPIOH_PCLK_EN();
 8000404:	4b06      	ldr	r3, [pc, #24]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000408:	4a05      	ldr	r2, [pc, #20]	@ (8000420 <GPIO_PeriClockControl+0xd0>)
 800040a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800040e:	6313      	str	r3, [r2, #48]	@ 0x30
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	40020000 	.word	0x40020000
 8000420:	40023800 	.word	0x40023800
 8000424:	40020400 	.word	0x40020400
 8000428:	40020800 	.word	0x40020800
 800042c:	40020c00 	.word	0x40020c00
 8000430:	40021000 	.word	0x40021000
 8000434:	40021400 	.word	0x40021400
 8000438:	40021800 	.word	0x40021800
 800043c:	40021c00 	.word	0x40021c00

08000440 <GPIO_Init>:
 *
 * @Note              -

 */
void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 8000440:	b580      	push	{r7, lr}
 8000442:	b086      	sub	sp, #24
 8000444:	af00      	add	r7, sp, #0
 8000446:	6078      	str	r0, [r7, #4]
	 uint32_t temp=0; //temp. register
 8000448:	2300      	movs	r3, #0
 800044a:	617b      	str	r3, [r7, #20]

	 //enable the peripheral clock

	 GPIO_PeriClockControl(pGPIOHandle->pGPIOx, ENABLE);
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	2101      	movs	r1, #1
 8000452:	4618      	mov	r0, r3
 8000454:	f7ff ff7c 	bl	8000350 <GPIO_PeriClockControl>

	//1 . configure the mode of gpio pin

	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 8000458:	687b      	ldr	r3, [r7, #4]
 800045a:	795b      	ldrb	r3, [r3, #5]
 800045c:	2b03      	cmp	r3, #3
 800045e:	d820      	bhi.n	80004a2 <GPIO_Init+0x62>
	{
		//the non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber ) );
 8000460:	687b      	ldr	r3, [r7, #4]
 8000462:	795b      	ldrb	r3, [r3, #5]
 8000464:	461a      	mov	r2, r3
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	791b      	ldrb	r3, [r3, #4]
 800046a:	005b      	lsls	r3, r3, #1
 800046c:	fa02 f303 	lsl.w	r3, r2, r3
 8000470:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << (2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000472:	687b      	ldr	r3, [r7, #4]
 8000474:	681b      	ldr	r3, [r3, #0]
 8000476:	681a      	ldr	r2, [r3, #0]
 8000478:	687b      	ldr	r3, [r7, #4]
 800047a:	791b      	ldrb	r3, [r3, #4]
 800047c:	005b      	lsls	r3, r3, #1
 800047e:	2103      	movs	r1, #3
 8000480:	fa01 f303 	lsl.w	r3, r1, r3
 8000484:	43db      	mvns	r3, r3
 8000486:	4619      	mov	r1, r3
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	400a      	ands	r2, r1
 800048e:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp; //setting
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	681b      	ldr	r3, [r3, #0]
 8000494:	6819      	ldr	r1, [r3, #0]
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	697a      	ldr	r2, [r7, #20]
 800049c:	430a      	orrs	r2, r1
 800049e:	601a      	str	r2, [r3, #0]
 80004a0:	e0c1      	b.n	8000626 <GPIO_Init+0x1e6>

	}else
	{
		//this part will code later . ( interrupt mode)
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_FT )
 80004a2:	687b      	ldr	r3, [r7, #4]
 80004a4:	795b      	ldrb	r3, [r3, #5]
 80004a6:	2b04      	cmp	r3, #4
 80004a8:	d117      	bne.n	80004da <GPIO_Init+0x9a>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004aa:	4b47      	ldr	r3, [pc, #284]	@ (80005c8 <GPIO_Init+0x188>)
 80004ac:	68db      	ldr	r3, [r3, #12]
 80004ae:	687a      	ldr	r2, [r7, #4]
 80004b0:	7912      	ldrb	r2, [r2, #4]
 80004b2:	4611      	mov	r1, r2
 80004b4:	2201      	movs	r2, #1
 80004b6:	408a      	lsls	r2, r1
 80004b8:	4611      	mov	r1, r2
 80004ba:	4a43      	ldr	r2, [pc, #268]	@ (80005c8 <GPIO_Init+0x188>)
 80004bc:	430b      	orrs	r3, r1
 80004be:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004c0:	4b41      	ldr	r3, [pc, #260]	@ (80005c8 <GPIO_Init+0x188>)
 80004c2:	689b      	ldr	r3, [r3, #8]
 80004c4:	687a      	ldr	r2, [r7, #4]
 80004c6:	7912      	ldrb	r2, [r2, #4]
 80004c8:	4611      	mov	r1, r2
 80004ca:	2201      	movs	r2, #1
 80004cc:	408a      	lsls	r2, r1
 80004ce:	43d2      	mvns	r2, r2
 80004d0:	4611      	mov	r1, r2
 80004d2:	4a3d      	ldr	r2, [pc, #244]	@ (80005c8 <GPIO_Init+0x188>)
 80004d4:	400b      	ands	r3, r1
 80004d6:	6093      	str	r3, [r2, #8]
 80004d8:	e035      	b.n	8000546 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IT_RT )
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	795b      	ldrb	r3, [r3, #5]
 80004de:	2b05      	cmp	r3, #5
 80004e0:	d117      	bne.n	8000512 <GPIO_Init+0xd2>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004e2:	4b39      	ldr	r3, [pc, #228]	@ (80005c8 <GPIO_Init+0x188>)
 80004e4:	689b      	ldr	r3, [r3, #8]
 80004e6:	687a      	ldr	r2, [r7, #4]
 80004e8:	7912      	ldrb	r2, [r2, #4]
 80004ea:	4611      	mov	r1, r2
 80004ec:	2201      	movs	r2, #1
 80004ee:	408a      	lsls	r2, r1
 80004f0:	4611      	mov	r1, r2
 80004f2:	4a35      	ldr	r2, [pc, #212]	@ (80005c8 <GPIO_Init+0x188>)
 80004f4:	430b      	orrs	r3, r1
 80004f6:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004f8:	4b33      	ldr	r3, [pc, #204]	@ (80005c8 <GPIO_Init+0x188>)
 80004fa:	68db      	ldr	r3, [r3, #12]
 80004fc:	687a      	ldr	r2, [r7, #4]
 80004fe:	7912      	ldrb	r2, [r2, #4]
 8000500:	4611      	mov	r1, r2
 8000502:	2201      	movs	r2, #1
 8000504:	408a      	lsls	r2, r1
 8000506:	43d2      	mvns	r2, r2
 8000508:	4611      	mov	r1, r2
 800050a:	4a2f      	ldr	r2, [pc, #188]	@ (80005c8 <GPIO_Init+0x188>)
 800050c:	400b      	ands	r3, r1
 800050e:	60d3      	str	r3, [r2, #12]
 8000510:	e019      	b.n	8000546 <GPIO_Init+0x106>

		}else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IT_RFT )
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	795b      	ldrb	r3, [r3, #5]
 8000516:	2b06      	cmp	r3, #6
 8000518:	d115      	bne.n	8000546 <GPIO_Init+0x106>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800051a:	4b2b      	ldr	r3, [pc, #172]	@ (80005c8 <GPIO_Init+0x188>)
 800051c:	689b      	ldr	r3, [r3, #8]
 800051e:	687a      	ldr	r2, [r7, #4]
 8000520:	7912      	ldrb	r2, [r2, #4]
 8000522:	4611      	mov	r1, r2
 8000524:	2201      	movs	r2, #1
 8000526:	408a      	lsls	r2, r1
 8000528:	4611      	mov	r1, r2
 800052a:	4a27      	ldr	r2, [pc, #156]	@ (80005c8 <GPIO_Init+0x188>)
 800052c:	430b      	orrs	r3, r1
 800052e:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000530:	4b25      	ldr	r3, [pc, #148]	@ (80005c8 <GPIO_Init+0x188>)
 8000532:	68db      	ldr	r3, [r3, #12]
 8000534:	687a      	ldr	r2, [r7, #4]
 8000536:	7912      	ldrb	r2, [r2, #4]
 8000538:	4611      	mov	r1, r2
 800053a:	2201      	movs	r2, #1
 800053c:	408a      	lsls	r2, r1
 800053e:	4611      	mov	r1, r2
 8000540:	4a21      	ldr	r2, [pc, #132]	@ (80005c8 <GPIO_Init+0x188>)
 8000542:	430b      	orrs	r3, r1
 8000544:	60d3      	str	r3, [r2, #12]
		}

		//2. configure the GPIO port selection in SYSCFG_EXTICR
		uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	791b      	ldrb	r3, [r3, #4]
 800054a:	089b      	lsrs	r3, r3, #2
 800054c:	74fb      	strb	r3, [r7, #19]
		uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 800054e:	687b      	ldr	r3, [r7, #4]
 8000550:	791b      	ldrb	r3, [r3, #4]
 8000552:	f003 0303 	and.w	r3, r3, #3
 8000556:	74bb      	strb	r3, [r7, #18]
		uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	4a1b      	ldr	r2, [pc, #108]	@ (80005cc <GPIO_Init+0x18c>)
 800055e:	4293      	cmp	r3, r2
 8000560:	d044      	beq.n	80005ec <GPIO_Init+0x1ac>
 8000562:	687b      	ldr	r3, [r7, #4]
 8000564:	681b      	ldr	r3, [r3, #0]
 8000566:	4a1a      	ldr	r2, [pc, #104]	@ (80005d0 <GPIO_Init+0x190>)
 8000568:	4293      	cmp	r3, r2
 800056a:	d02b      	beq.n	80005c4 <GPIO_Init+0x184>
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	681b      	ldr	r3, [r3, #0]
 8000570:	4a18      	ldr	r2, [pc, #96]	@ (80005d4 <GPIO_Init+0x194>)
 8000572:	4293      	cmp	r3, r2
 8000574:	d024      	beq.n	80005c0 <GPIO_Init+0x180>
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	4a17      	ldr	r2, [pc, #92]	@ (80005d8 <GPIO_Init+0x198>)
 800057c:	4293      	cmp	r3, r2
 800057e:	d01d      	beq.n	80005bc <GPIO_Init+0x17c>
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	681b      	ldr	r3, [r3, #0]
 8000584:	4a15      	ldr	r2, [pc, #84]	@ (80005dc <GPIO_Init+0x19c>)
 8000586:	4293      	cmp	r3, r2
 8000588:	d016      	beq.n	80005b8 <GPIO_Init+0x178>
 800058a:	687b      	ldr	r3, [r7, #4]
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a14      	ldr	r2, [pc, #80]	@ (80005e0 <GPIO_Init+0x1a0>)
 8000590:	4293      	cmp	r3, r2
 8000592:	d00f      	beq.n	80005b4 <GPIO_Init+0x174>
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4a12      	ldr	r2, [pc, #72]	@ (80005e4 <GPIO_Init+0x1a4>)
 800059a:	4293      	cmp	r3, r2
 800059c:	d008      	beq.n	80005b0 <GPIO_Init+0x170>
 800059e:	687b      	ldr	r3, [r7, #4]
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	4a11      	ldr	r2, [pc, #68]	@ (80005e8 <GPIO_Init+0x1a8>)
 80005a4:	4293      	cmp	r3, r2
 80005a6:	d101      	bne.n	80005ac <GPIO_Init+0x16c>
 80005a8:	2307      	movs	r3, #7
 80005aa:	e020      	b.n	80005ee <GPIO_Init+0x1ae>
 80005ac:	2300      	movs	r3, #0
 80005ae:	e01e      	b.n	80005ee <GPIO_Init+0x1ae>
 80005b0:	2306      	movs	r3, #6
 80005b2:	e01c      	b.n	80005ee <GPIO_Init+0x1ae>
 80005b4:	2305      	movs	r3, #5
 80005b6:	e01a      	b.n	80005ee <GPIO_Init+0x1ae>
 80005b8:	2304      	movs	r3, #4
 80005ba:	e018      	b.n	80005ee <GPIO_Init+0x1ae>
 80005bc:	2303      	movs	r3, #3
 80005be:	e016      	b.n	80005ee <GPIO_Init+0x1ae>
 80005c0:	2302      	movs	r3, #2
 80005c2:	e014      	b.n	80005ee <GPIO_Init+0x1ae>
 80005c4:	2301      	movs	r3, #1
 80005c6:	e012      	b.n	80005ee <GPIO_Init+0x1ae>
 80005c8:	40013c00 	.word	0x40013c00
 80005cc:	40020000 	.word	0x40020000
 80005d0:	40020400 	.word	0x40020400
 80005d4:	40020800 	.word	0x40020800
 80005d8:	40020c00 	.word	0x40020c00
 80005dc:	40021000 	.word	0x40021000
 80005e0:	40021400 	.word	0x40021400
 80005e4:	40021800 	.word	0x40021800
 80005e8:	40021c00 	.word	0x40021c00
 80005ec:	2300      	movs	r3, #0
 80005ee:	747b      	strb	r3, [r7, #17]
		SYSCFG_PCLK_EN();
 80005f0:	4b59      	ldr	r3, [pc, #356]	@ (8000758 <GPIO_Init+0x318>)
 80005f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80005f4:	4a58      	ldr	r2, [pc, #352]	@ (8000758 <GPIO_Init+0x318>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80005fa:	6453      	str	r3, [r2, #68]	@ 0x44
		SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 80005fc:	7c7a      	ldrb	r2, [r7, #17]
 80005fe:	7cbb      	ldrb	r3, [r7, #18]
 8000600:	009b      	lsls	r3, r3, #2
 8000602:	fa02 f103 	lsl.w	r1, r2, r3
 8000606:	4a55      	ldr	r2, [pc, #340]	@ (800075c <GPIO_Init+0x31c>)
 8000608:	7cfb      	ldrb	r3, [r7, #19]
 800060a:	3302      	adds	r3, #2
 800060c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

		//3 . enable the exti interrupt delivery using IMR
		EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 8000610:	4b53      	ldr	r3, [pc, #332]	@ (8000760 <GPIO_Init+0x320>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	687a      	ldr	r2, [r7, #4]
 8000616:	7912      	ldrb	r2, [r2, #4]
 8000618:	4611      	mov	r1, r2
 800061a:	2201      	movs	r2, #1
 800061c:	408a      	lsls	r2, r1
 800061e:	4611      	mov	r1, r2
 8000620:	4a4f      	ldr	r2, [pc, #316]	@ (8000760 <GPIO_Init+0x320>)
 8000622:	430b      	orrs	r3, r1
 8000624:	6013      	str	r3, [r2, #0]
	}

	//2. configure the speed
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	799b      	ldrb	r3, [r3, #6]
 800062a:	461a      	mov	r2, r3
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	791b      	ldrb	r3, [r3, #4]
 8000630:	005b      	lsls	r3, r3, #1
 8000632:	fa02 f303 	lsl.w	r3, r2, r3
 8000636:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	689a      	ldr	r2, [r3, #8]
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	791b      	ldrb	r3, [r3, #4]
 8000642:	005b      	lsls	r3, r3, #1
 8000644:	2103      	movs	r1, #3
 8000646:	fa01 f303 	lsl.w	r3, r1, r3
 800064a:	43db      	mvns	r3, r3
 800064c:	4619      	mov	r1, r3
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	681b      	ldr	r3, [r3, #0]
 8000652:	400a      	ands	r2, r1
 8000654:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	681b      	ldr	r3, [r3, #0]
 800065a:	6899      	ldr	r1, [r3, #8]
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	681b      	ldr	r3, [r3, #0]
 8000660:	697a      	ldr	r2, [r7, #20]
 8000662:	430a      	orrs	r2, r1
 8000664:	609a      	str	r2, [r3, #8]

	//3. configure the pupd settings
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber) );
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	79db      	ldrb	r3, [r3, #7]
 800066a:	461a      	mov	r2, r3
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	791b      	ldrb	r3, [r3, #4]
 8000670:	005b      	lsls	r3, r3, #1
 8000672:	fa02 f303 	lsl.w	r3, r2, r3
 8000676:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber)); //clearing
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	68da      	ldr	r2, [r3, #12]
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	791b      	ldrb	r3, [r3, #4]
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	2103      	movs	r1, #3
 8000686:	fa01 f303 	lsl.w	r3, r1, r3
 800068a:	43db      	mvns	r3, r3
 800068c:	4619      	mov	r1, r3
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	681b      	ldr	r3, [r3, #0]
 8000692:	400a      	ands	r2, r1
 8000694:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	68d9      	ldr	r1, [r3, #12]
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	681b      	ldr	r3, [r3, #0]
 80006a0:	697a      	ldr	r2, [r7, #20]
 80006a2:	430a      	orrs	r2, r1
 80006a4:	60da      	str	r2, [r3, #12]


	//4. configure the optype
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber );
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	7a1b      	ldrb	r3, [r3, #8]
 80006aa:	461a      	mov	r2, r3
 80006ac:	687b      	ldr	r3, [r7, #4]
 80006ae:	791b      	ldrb	r3, [r3, #4]
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber); //clearing
 80006b6:	687b      	ldr	r3, [r7, #4]
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	685a      	ldr	r2, [r3, #4]
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	791b      	ldrb	r3, [r3, #4]
 80006c0:	4619      	mov	r1, r3
 80006c2:	2301      	movs	r3, #1
 80006c4:	408b      	lsls	r3, r1
 80006c6:	43db      	mvns	r3, r3
 80006c8:	4619      	mov	r1, r3
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	681b      	ldr	r3, [r3, #0]
 80006ce:	400a      	ands	r2, r1
 80006d0:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	681b      	ldr	r3, [r3, #0]
 80006d6:	6859      	ldr	r1, [r3, #4]
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	697a      	ldr	r2, [r7, #20]
 80006de:	430a      	orrs	r2, r1
 80006e0:	605a      	str	r2, [r3, #4]

	//5. configure the alt functionality
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	795b      	ldrb	r3, [r3, #5]
 80006e6:	2b02      	cmp	r3, #2
 80006e8:	d131      	bne.n	800074e <GPIO_Init+0x30e>
	{
		//configure the alt function registers.
		uint8_t temp1, temp2;

		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80006ea:	687b      	ldr	r3, [r7, #4]
 80006ec:	791b      	ldrb	r3, [r3, #4]
 80006ee:	08db      	lsrs	r3, r3, #3
 80006f0:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber  % 8;
 80006f2:	687b      	ldr	r3, [r7, #4]
 80006f4:	791b      	ldrb	r3, [r3, #4]
 80006f6:	f003 0307 	and.w	r3, r3, #7
 80006fa:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << ( 4 * temp2 ) ); //clearing
 80006fc:	687b      	ldr	r3, [r7, #4]
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	7c3a      	ldrb	r2, [r7, #16]
 8000702:	3208      	adds	r2, #8
 8000704:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000708:	7bfb      	ldrb	r3, [r7, #15]
 800070a:	009b      	lsls	r3, r3, #2
 800070c:	220f      	movs	r2, #15
 800070e:	fa02 f303 	lsl.w	r3, r2, r3
 8000712:	43db      	mvns	r3, r3
 8000714:	4618      	mov	r0, r3
 8000716:	687b      	ldr	r3, [r7, #4]
 8000718:	681b      	ldr	r3, [r3, #0]
 800071a:	7c3a      	ldrb	r2, [r7, #16]
 800071c:	4001      	ands	r1, r0
 800071e:	3208      	adds	r2, #8
 8000720:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << ( 4 * temp2 ) );
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	7c3a      	ldrb	r2, [r7, #16]
 800072a:	3208      	adds	r2, #8
 800072c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	7a5b      	ldrb	r3, [r3, #9]
 8000734:	461a      	mov	r2, r3
 8000736:	7bfb      	ldrb	r3, [r7, #15]
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	fa02 f303 	lsl.w	r3, r2, r3
 800073e:	4618      	mov	r0, r3
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	7c3a      	ldrb	r2, [r7, #16]
 8000746:	4301      	orrs	r1, r0
 8000748:	3208      	adds	r2, #8
 800074a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}

}
 800074e:	bf00      	nop
 8000750:	3718      	adds	r7, #24
 8000752:	46bd      	mov	sp, r7
 8000754:	bd80      	pop	{r7, pc}
 8000756:	bf00      	nop
 8000758:	40023800 	.word	0x40023800
 800075c:	40013800 	.word	0x40013800
 8000760:	40013c00 	.word	0x40013c00

08000764 <SPI_PeriClockControl>:

/*********************************************************************
 * @fn      		  - SPI_PeriClockControl
 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 8000764:	b480      	push	{r7}
 8000766:	b083      	sub	sp, #12
 8000768:	af00      	add	r7, sp, #0
 800076a:	6078      	str	r0, [r7, #4]
 800076c:	460b      	mov	r3, r1
 800076e:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000770:	78fb      	ldrb	r3, [r7, #3]
 8000772:	2b01      	cmp	r3, #1
 8000774:	d12b      	bne.n	80007ce <SPI_PeriClockControl+0x6a>
	{
		if(pSPIx == SPI1)
 8000776:	687b      	ldr	r3, [r7, #4]
 8000778:	4a2d      	ldr	r2, [pc, #180]	@ (8000830 <SPI_PeriClockControl+0xcc>)
 800077a:	4293      	cmp	r3, r2
 800077c:	d106      	bne.n	800078c <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 800077e:	4b2d      	ldr	r3, [pc, #180]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 8000780:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000782:	4a2c      	ldr	r2, [pc, #176]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 8000784:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000788:	6453      	str	r3, [r2, #68]	@ 0x44
		{
			SPI4_PCLK_DI();
		}
	}

}
 800078a:	e04b      	b.n	8000824 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2)
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	4a2a      	ldr	r2, [pc, #168]	@ (8000838 <SPI_PeriClockControl+0xd4>)
 8000790:	4293      	cmp	r3, r2
 8000792:	d106      	bne.n	80007a2 <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 8000794:	4b27      	ldr	r3, [pc, #156]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000798:	4a26      	ldr	r2, [pc, #152]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 800079a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800079e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007a0:	e040      	b.n	8000824 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2)
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	4a24      	ldr	r2, [pc, #144]	@ (8000838 <SPI_PeriClockControl+0xd4>)
 80007a6:	4293      	cmp	r3, r2
 80007a8:	d106      	bne.n	80007b8 <SPI_PeriClockControl+0x54>
			SPI3_PCLK_EN();
 80007aa:	4b22      	ldr	r3, [pc, #136]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 80007ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007ae:	4a21      	ldr	r2, [pc, #132]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 80007b0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80007b4:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007b6:	e035      	b.n	8000824 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3)
 80007b8:	687b      	ldr	r3, [r7, #4]
 80007ba:	4a20      	ldr	r2, [pc, #128]	@ (800083c <SPI_PeriClockControl+0xd8>)
 80007bc:	4293      	cmp	r3, r2
 80007be:	d131      	bne.n	8000824 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_EN();
 80007c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 80007c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007c4:	4a1b      	ldr	r2, [pc, #108]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 80007c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80007ca:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80007cc:	e02a      	b.n	8000824 <SPI_PeriClockControl+0xc0>
		if(pSPIx == SPI1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	4a17      	ldr	r2, [pc, #92]	@ (8000830 <SPI_PeriClockControl+0xcc>)
 80007d2:	4293      	cmp	r3, r2
 80007d4:	d106      	bne.n	80007e4 <SPI_PeriClockControl+0x80>
			SPI1_PCLK_DI();
 80007d6:	4b17      	ldr	r3, [pc, #92]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 80007d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80007da:	4a16      	ldr	r2, [pc, #88]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 80007dc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80007e0:	6453      	str	r3, [r2, #68]	@ 0x44
}
 80007e2:	e01f      	b.n	8000824 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	4a14      	ldr	r2, [pc, #80]	@ (8000838 <SPI_PeriClockControl+0xd4>)
 80007e8:	4293      	cmp	r3, r2
 80007ea:	d106      	bne.n	80007fa <SPI_PeriClockControl+0x96>
			SPI2_PCLK_DI();
 80007ec:	4b11      	ldr	r3, [pc, #68]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 80007ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80007f0:	4a10      	ldr	r2, [pc, #64]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 80007f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80007f6:	6413      	str	r3, [r2, #64]	@ 0x40
}
 80007f8:	e014      	b.n	8000824 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI3)
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	4a0f      	ldr	r2, [pc, #60]	@ (800083c <SPI_PeriClockControl+0xd8>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d106      	bne.n	8000810 <SPI_PeriClockControl+0xac>
			SPI3_PCLK_DI();
 8000802:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000806:	4a0b      	ldr	r2, [pc, #44]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 8000808:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800080c:	6413      	str	r3, [r2, #64]	@ 0x40
}
 800080e:	e009      	b.n	8000824 <SPI_PeriClockControl+0xc0>
		}else if(pSPIx == SPI4)
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	4a0b      	ldr	r2, [pc, #44]	@ (8000840 <SPI_PeriClockControl+0xdc>)
 8000814:	4293      	cmp	r3, r2
 8000816:	d105      	bne.n	8000824 <SPI_PeriClockControl+0xc0>
			SPI4_PCLK_DI();
 8000818:	4b06      	ldr	r3, [pc, #24]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 800081a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800081c:	4a05      	ldr	r2, [pc, #20]	@ (8000834 <SPI_PeriClockControl+0xd0>)
 800081e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8000822:	6453      	str	r3, [r2, #68]	@ 0x44
}
 8000824:	bf00      	nop
 8000826:	370c      	adds	r7, #12
 8000828:	46bd      	mov	sp, r7
 800082a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082e:	4770      	bx	lr
 8000830:	40013000 	.word	0x40013000
 8000834:	40023800 	.word	0x40023800
 8000838:	40003800 	.word	0x40003800
 800083c:	40003c00 	.word	0x40003c00
 8000840:	40013400 	.word	0x40013400

08000844 <SPI_Init>:

/*********************************************************************
 * @fn      		  - SPI_Init
 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b084      	sub	sp, #16
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	2101      	movs	r1, #1
 8000852:	4618      	mov	r0, r3
 8000854:	f7ff ff86 	bl	8000764 <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 8000858:	2300      	movs	r3, #0
 800085a:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	791b      	ldrb	r3, [r3, #4]
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	68fa      	ldr	r2, [r7, #12]
 8000864:	4313      	orrs	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	795b      	ldrb	r3, [r3, #5]
 800086c:	2b01      	cmp	r3, #1
 800086e:	d104      	bne.n	800087a <SPI_Init+0x36>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	e014      	b.n	80008a4 <SPI_Init+0x60>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	795b      	ldrb	r3, [r3, #5]
 800087e:	2b02      	cmp	r3, #2
 8000880:	d104      	bne.n	800088c <SPI_Init+0x48>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000888:	60fb      	str	r3, [r7, #12]
 800088a:	e00b      	b.n	80008a4 <SPI_Init+0x60>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	795b      	ldrb	r3, [r3, #5]
 8000890:	2b03      	cmp	r3, #3
 8000892:	d107      	bne.n	80008a4 <SPI_Init+0x60>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 8000894:	68fb      	ldr	r3, [r7, #12]
 8000896:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800089a:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80008a2:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	799b      	ldrb	r3, [r3, #6]
 80008a8:	00db      	lsls	r3, r3, #3
 80008aa:	68fa      	ldr	r2, [r7, #12]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	79db      	ldrb	r3, [r3, #7]
 80008b4:	02db      	lsls	r3, r3, #11
 80008b6:	68fa      	ldr	r2, [r7, #12]
 80008b8:	4313      	orrs	r3, r2
 80008ba:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	7a1b      	ldrb	r3, [r3, #8]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	68fa      	ldr	r2, [r7, #12]
 80008c4:	4313      	orrs	r3, r2
 80008c6:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 80008c8:	687b      	ldr	r3, [r7, #4]
 80008ca:	7a5b      	ldrb	r3, [r3, #9]
 80008cc:	461a      	mov	r2, r3
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	7a9b      	ldrb	r3, [r3, #10]
 80008d8:	025b      	lsls	r3, r3, #9
 80008da:	68fa      	ldr	r2, [r7, #12]
 80008dc:	4313      	orrs	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	68fa      	ldr	r2, [r7, #12]
 80008e6:	601a      	str	r2, [r3, #0]

}
 80008e8:	bf00      	nop
 80008ea:	3710      	adds	r7, #16
 80008ec:	46bd      	mov	sp, r7
 80008ee:	bd80      	pop	{r7, pc}

080008f0 <SPI_GetFlagStatus>:
		SPI4_REG_RESET();
	}
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
 80008f8:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	689a      	ldr	r2, [r3, #8]
 80008fe:	683b      	ldr	r3, [r7, #0]
 8000900:	4013      	ands	r3, r2
 8000902:	2b00      	cmp	r3, #0
 8000904:	d001      	beq.n	800090a <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000906:	2301      	movs	r3, #1
 8000908:	e000      	b.n	800090c <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 800090a:	2300      	movs	r3, #0
}
 800090c:	4618      	mov	r0, r3
 800090e:	370c      	adds	r7, #12
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <SPI_SendData>:

/*********************************************************************
 * @fn      		  - SPI_SendData
 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	60f8      	str	r0, [r7, #12]
 8000920:	60b9      	str	r1, [r7, #8]
 8000922:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 8000924:	e027      	b.n	8000976 <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 8000926:	bf00      	nop
 8000928:	2102      	movs	r1, #2
 800092a:	68f8      	ldr	r0, [r7, #12]
 800092c:	f7ff ffe0 	bl	80008f0 <SPI_GetFlagStatus>
 8000930:	4603      	mov	r3, r0
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0f8      	beq.n	8000928 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 8000936:	68fb      	ldr	r3, [r7, #12]
 8000938:	681b      	ldr	r3, [r3, #0]
 800093a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800093e:	2b00      	cmp	r3, #0
 8000940:	d00e      	beq.n	8000960 <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 8000942:	68bb      	ldr	r3, [r7, #8]
 8000944:	881b      	ldrh	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	68fb      	ldr	r3, [r7, #12]
 800094a:	60da      	str	r2, [r3, #12]
			Len--;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	3b01      	subs	r3, #1
 8000950:	607b      	str	r3, [r7, #4]
			Len--;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	3b01      	subs	r3, #1
 8000956:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000958:	68bb      	ldr	r3, [r7, #8]
 800095a:	3301      	adds	r3, #1
 800095c:	60bb      	str	r3, [r7, #8]
 800095e:	e00a      	b.n	8000976 <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR =   *pTxBuffer;
 8000960:	68bb      	ldr	r3, [r7, #8]
 8000962:	781b      	ldrb	r3, [r3, #0]
 8000964:	461a      	mov	r2, r3
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	60da      	str	r2, [r3, #12]
			Len--;
 800096a:	687b      	ldr	r3, [r7, #4]
 800096c:	3b01      	subs	r3, #1
 800096e:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 8000970:	68bb      	ldr	r3, [r7, #8]
 8000972:	3301      	adds	r3, #1
 8000974:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	2b00      	cmp	r3, #0
 800097a:	d1d4      	bne.n	8000926 <SPI_SendData+0xe>
		}
	}

}
 800097c:	bf00      	nop
 800097e:	bf00      	nop
 8000980:	3710      	adds	r7, #16
 8000982:	46bd      	mov	sp, r7
 8000984:	bd80      	pop	{r7, pc}

08000986 <SPI_PeripheralControl>:

/*********************************************************************
 * @fn      		  - SPI_PeripheralControl
 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000986:	b480      	push	{r7}
 8000988:	b083      	sub	sp, #12
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	460b      	mov	r3, r1
 8000990:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000992:	78fb      	ldrb	r3, [r7, #3]
 8000994:	2b01      	cmp	r3, #1
 8000996:	d106      	bne.n	80009a6 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	681b      	ldr	r3, [r3, #0]
 800099c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 80009a4:	e005      	b.n	80009b2 <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
}
 80009b2:	bf00      	nop
 80009b4:	370c      	adds	r7, #12
 80009b6:	46bd      	mov	sp, r7
 80009b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009bc:	4770      	bx	lr

080009be <SPI_SSIConfig>:

/*********************************************************************
 * @fn      		  - SPI_SSIConfig
 */
void  SPI_SSIConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 80009be:	b480      	push	{r7}
 80009c0:	b083      	sub	sp, #12
 80009c2:	af00      	add	r7, sp, #0
 80009c4:	6078      	str	r0, [r7, #4]
 80009c6:	460b      	mov	r3, r1
 80009c8:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 80009ca:	78fb      	ldrb	r3, [r7, #3]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d106      	bne.n	80009de <SPI_SSIConfig+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SSI);
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
	}


}
 80009dc:	e005      	b.n	80009ea <SPI_SSIConfig+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SSI);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	601a      	str	r2, [r3, #0]
}
 80009ea:	bf00      	nop
 80009ec:	370c      	adds	r7, #12
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <__libc_init_array>:
 80009f8:	b570      	push	{r4, r5, r6, lr}
 80009fa:	4d0d      	ldr	r5, [pc, #52]	@ (8000a30 <__libc_init_array+0x38>)
 80009fc:	4c0d      	ldr	r4, [pc, #52]	@ (8000a34 <__libc_init_array+0x3c>)
 80009fe:	1b64      	subs	r4, r4, r5
 8000a00:	10a4      	asrs	r4, r4, #2
 8000a02:	2600      	movs	r6, #0
 8000a04:	42a6      	cmp	r6, r4
 8000a06:	d109      	bne.n	8000a1c <__libc_init_array+0x24>
 8000a08:	4d0b      	ldr	r5, [pc, #44]	@ (8000a38 <__libc_init_array+0x40>)
 8000a0a:	4c0c      	ldr	r4, [pc, #48]	@ (8000a3c <__libc_init_array+0x44>)
 8000a0c:	f000 f87e 	bl	8000b0c <_init>
 8000a10:	1b64      	subs	r4, r4, r5
 8000a12:	10a4      	asrs	r4, r4, #2
 8000a14:	2600      	movs	r6, #0
 8000a16:	42a6      	cmp	r6, r4
 8000a18:	d105      	bne.n	8000a26 <__libc_init_array+0x2e>
 8000a1a:	bd70      	pop	{r4, r5, r6, pc}
 8000a1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a20:	4798      	blx	r3
 8000a22:	3601      	adds	r6, #1
 8000a24:	e7ee      	b.n	8000a04 <__libc_init_array+0xc>
 8000a26:	f855 3b04 	ldr.w	r3, [r5], #4
 8000a2a:	4798      	blx	r3
 8000a2c:	3601      	adds	r6, #1
 8000a2e:	e7f2      	b.n	8000a16 <__libc_init_array+0x1e>
 8000a30:	08000b38 	.word	0x08000b38
 8000a34:	08000b38 	.word	0x08000b38
 8000a38:	08000b38 	.word	0x08000b38
 8000a3c:	08000b40 	.word	0x08000b40

08000a40 <__retarget_lock_acquire_recursive>:
 8000a40:	4770      	bx	lr

08000a42 <__retarget_lock_release_recursive>:
 8000a42:	4770      	bx	lr

08000a44 <register_fini>:
 8000a44:	4b02      	ldr	r3, [pc, #8]	@ (8000a50 <register_fini+0xc>)
 8000a46:	b113      	cbz	r3, 8000a4e <register_fini+0xa>
 8000a48:	4802      	ldr	r0, [pc, #8]	@ (8000a54 <register_fini+0x10>)
 8000a4a:	f000 b805 	b.w	8000a58 <atexit>
 8000a4e:	4770      	bx	lr
 8000a50:	00000000 	.word	0x00000000
 8000a54:	08000a65 	.word	0x08000a65

08000a58 <atexit>:
 8000a58:	2300      	movs	r3, #0
 8000a5a:	4601      	mov	r1, r0
 8000a5c:	461a      	mov	r2, r3
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 b814 	b.w	8000a8c <__register_exitproc>

08000a64 <__libc_fini_array>:
 8000a64:	b538      	push	{r3, r4, r5, lr}
 8000a66:	4d07      	ldr	r5, [pc, #28]	@ (8000a84 <__libc_fini_array+0x20>)
 8000a68:	4c07      	ldr	r4, [pc, #28]	@ (8000a88 <__libc_fini_array+0x24>)
 8000a6a:	1b64      	subs	r4, r4, r5
 8000a6c:	10a4      	asrs	r4, r4, #2
 8000a6e:	b91c      	cbnz	r4, 8000a78 <__libc_fini_array+0x14>
 8000a70:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000a74:	f000 b850 	b.w	8000b18 <_fini>
 8000a78:	3c01      	subs	r4, #1
 8000a7a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 8000a7e:	4798      	blx	r3
 8000a80:	e7f5      	b.n	8000a6e <__libc_fini_array+0xa>
 8000a82:	bf00      	nop
 8000a84:	08000b40 	.word	0x08000b40
 8000a88:	08000b44 	.word	0x08000b44

08000a8c <__register_exitproc>:
 8000a8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a90:	f8df a074 	ldr.w	sl, [pc, #116]	@ 8000b08 <__register_exitproc+0x7c>
 8000a94:	4606      	mov	r6, r0
 8000a96:	f8da 0000 	ldr.w	r0, [sl]
 8000a9a:	4698      	mov	r8, r3
 8000a9c:	460f      	mov	r7, r1
 8000a9e:	4691      	mov	r9, r2
 8000aa0:	f7ff ffce 	bl	8000a40 <__retarget_lock_acquire_recursive>
 8000aa4:	4b16      	ldr	r3, [pc, #88]	@ (8000b00 <__register_exitproc+0x74>)
 8000aa6:	681c      	ldr	r4, [r3, #0]
 8000aa8:	b90c      	cbnz	r4, 8000aae <__register_exitproc+0x22>
 8000aaa:	4c16      	ldr	r4, [pc, #88]	@ (8000b04 <__register_exitproc+0x78>)
 8000aac:	601c      	str	r4, [r3, #0]
 8000aae:	6865      	ldr	r5, [r4, #4]
 8000ab0:	f8da 0000 	ldr.w	r0, [sl]
 8000ab4:	2d1f      	cmp	r5, #31
 8000ab6:	dd05      	ble.n	8000ac4 <__register_exitproc+0x38>
 8000ab8:	f7ff ffc3 	bl	8000a42 <__retarget_lock_release_recursive>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac4:	b19e      	cbz	r6, 8000aee <__register_exitproc+0x62>
 8000ac6:	eb04 0185 	add.w	r1, r4, r5, lsl #2
 8000aca:	2201      	movs	r2, #1
 8000acc:	f8c1 9088 	str.w	r9, [r1, #136]	@ 0x88
 8000ad0:	f8d4 3188 	ldr.w	r3, [r4, #392]	@ 0x188
 8000ad4:	40aa      	lsls	r2, r5
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	f8c4 3188 	str.w	r3, [r4, #392]	@ 0x188
 8000adc:	2e02      	cmp	r6, #2
 8000ade:	f8c1 8108 	str.w	r8, [r1, #264]	@ 0x108
 8000ae2:	bf02      	ittt	eq
 8000ae4:	f8d4 318c 	ldreq.w	r3, [r4, #396]	@ 0x18c
 8000ae8:	4313      	orreq	r3, r2
 8000aea:	f8c4 318c 	streq.w	r3, [r4, #396]	@ 0x18c
 8000aee:	1c6b      	adds	r3, r5, #1
 8000af0:	3502      	adds	r5, #2
 8000af2:	6063      	str	r3, [r4, #4]
 8000af4:	f844 7025 	str.w	r7, [r4, r5, lsl #2]
 8000af8:	f7ff ffa3 	bl	8000a42 <__retarget_lock_release_recursive>
 8000afc:	2000      	movs	r0, #0
 8000afe:	e7df      	b.n	8000ac0 <__register_exitproc+0x34>
 8000b00:	20000024 	.word	0x20000024
 8000b04:	20000028 	.word	0x20000028
 8000b08:	20000000 	.word	0x20000000

08000b0c <_init>:
 8000b0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b0e:	bf00      	nop
 8000b10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b12:	bc08      	pop	{r3}
 8000b14:	469e      	mov	lr, r3
 8000b16:	4770      	bx	lr

08000b18 <_fini>:
 8000b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b1a:	bf00      	nop
 8000b1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000b1e:	bc08      	pop	{r3}
 8000b20:	469e      	mov	lr, r3
 8000b22:	4770      	bx	lr
